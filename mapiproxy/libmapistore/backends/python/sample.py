#!/usr/bin/python
# OpenChange python sample backend
#
# Copyright (C) Julien Kerihuel <j.kerihuel@openchange.org> 2014
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os,sys

root = os.path.abspath(os.path.dirname(__file__))
sys.path.append(os.sep.join((root, '..', '..')))

import json
import uuid
from datetime import datetime, timedelta
from pytz import timezone
from openchange import mapistore

import MySQLdb
from samba import Ldb
import optparse
import samba.getopt as options

class BackendObject(object):

    name = "sample"
    description = "Sample backend"
    namespace = "sample://"

    def __init__(self):
        print '[PYTHON]: %s backend class __init__' % self.name
        return

    def init(self):
        """ Initialize sample backend
        """
        print '[PYTHON]: %s backend.init: init()' % self.name
        return 0

    def list_contexts(self, username):
        """ List context capabilities of this backend.
        """
        print '[PYTHON]: %s backend.list_contexts(): username = %s' % (self.name, username)
        deadbeef = {}
        deadbeef["url"] = "sample://deadbeef0000001/"
        deadbeef["name"] = "deadbeef"
        deadbeef["main_folder"] = True
        deadbeef["role"] = mapistore.ROLE_MAIL
        deadbeef["tag"] = "tag"

        cacabeef = {}
        cacabeef["url"] = "sample://cacabeef0000001/"
        cacabeef["name"] = "cacabeef"
        cacabeef["main_folder"] = True
        cacabeef["role"] = mapistore.ROLE_CALENDAR
        cacabeef["tag"] = "tag"

        cadabeef = {}
        cadabeef["url"] = "sample://cadabeef0000001/"
        cadabeef["name"] = "cadabeef"
        cadabeef["main_folder"] = True
        cadabeef["role"] = mapistore.ROLE_CONTACTS
        cadabeef["tag"] = "tag"

        cafebeef = {}
        cafebeef["url"] = "sample://cafebeef0000001/"
        cafebeef["name"] = "cafebeef"
        cafebeef["main_folder"] = True
        cafebeef["role"] = mapistore.ROLE_TASKS
        cafebeef["tag"] = "tag"

        cababeef = {}
        cababeef["url"] = "sample://cababeef0000001/"
        cababeef["name"] = "cababeef"
        cababeef["main_folder"] = True
        cababeef["role"] = mapistore.ROLE_NOTES
        cababeef["tag"] = "tag"

        contexts = [deadbeef, cababeef, cacabeef, cadabeef, cafebeef]
        return contexts

    def create_context(self, uri, username):
        """ Create a context.
        """

        print '[PYTHON]: %s backend.create_context: uri = %s' % (self.name, uri)
        context = ContextObject(username, uri)

        return (0, context)


class ContextObject(BackendObject):

    mapping = {}

    def __init__(self, username, uri):
        self.username = username
        self.uri = uri
        #
        # Mail data
        #

        # Attachments
        attachment1 = {}
        attachment1["properties"] = {}
        attachment1["properties"]["PidTagMid"] = 0xdead00010000001
        attachment1["properties"]["PidTagAttachNumber"] = 0
        attachment1["properties"]["PidTagAttachMethod"] = 1
        attachment1["properties"]["PidTagAttachmentLinkId"] = 0x0
        attachment1["properties"]["PidTagAttachmentHidden"] = False
        attachment1["properties"]["PidTagAttachFilename"] = "Dummyfile.txt"
        attachment1["properties"]["PidTagAttachLongFilename"] = "Long Dummyfile.txt"
        attachment1["properties"]["PidTagAttachLongPathname"] = "Long Dummyfile.txt"
        attachment1["properties"]["PidTagAttachPathname"] = "Dummyfile.txt"
        attachment1["properties"]["PidTagAttachExtension"] = "txt"
        attachment1["properties"]["PidTagAttachContentId"] = "Content Id"
        attachment1["properties"]["PidTagAttachRendering"] = 1
        attachment1["properties"]["PidTagAttachDataBinary"] = bytearray("<html><head></head><h1>Attach me</h1></body></html>")
        attachment1["properties"]["PidTagAttachSize"] = len(attachment1["properties"]["PidTagAttachDataBinary"])

        # Recipients
        DummyTo = {}
        DummyTo["PidTagRecipientType"] = 0x1
        DummyTo["PidTagSmtpAddress"] = "dummy@openchange.org"
        DummyTo["PidTagRecipientDisplayName"] = "Dummy User"
        DummyTo["PidTagSentRepresentingName"] = "Dummy User"
        DummyTo["PidTagDisplayTo"] = "dummy@openchange.org"

        message1 = {}
        message1["recipients"] = [DummyTo, ]
        message1["attachments"] = [attachment1, ]
        message1["mid"] = 0xdead00010000001
        message1["fai"] = False
        message1["attachment_cache"] = []
        message1["properties"] = {}
        message1["properties"]["PidTagFolderId"] = 0xdeadbeef0000001
        message1["properties"]["PidTagMid"] = message1["mid"]
        message1["properties"]["PidTagInstID"] =  message1["mid"]
        message1["properties"]["PidTagSubjectPrefix"] = "Re:"
        message1["properties"]["PidTagInstanceNum"] = 0
        message1["properties"]["PidTagRowType"] = 1
        message1["properties"]["PidTagDepth"] = 0
        message1["properties"]["PidTagMessageClass"] = "IPM.Note"
        message1["properties"]["PidTagSubject"] = "Dummy Sample Email"
        message1["properties"]["PidTagNormalizedSubject"] = message1["properties"]["PidTagSubject"]
        message1["properties"]["PidTagConversationTopic"] = message1["properties"]["PidTagSubject"]
        message1["properties"]["PidTagBody"] = "This is the content of this sample email"
        message1["properties"]["PidTagHtml"] = bytearray("<html><head></head><h1>"+ message1["properties"]["PidTagBody"] + "</h1></body></html>")
        message1["properties"]["PidTagImportance"] = 2
        message1["properties"]["PidTagSensitivity"] = 1
        message1["properties"]["PidTagHasAttachments"] = True
        message1["properties"]["PidTagContentCount"] = len(message1["attachments"])
        message1["properties"]["PidTagInternetMessageId"] = "internet-message-id@openchange.org"
        message1["properties"]["PidTagChangeKey"] = bytearray(uuid.uuid1().bytes + '\x00\x00\x00\x00\x00\x01')
        message1["properties"]["PidTagMessageStatus"] = 0
        message1["properties"]["PidTagMessageFlags"] = 0
        message1["properties"]["PidTagLastModificationTime"] = float(datetime.now().strftime("%s.%f"))
        message1["properties"]["PidTagMessageDeliveryTime"] = float(datetime.now().strftime("%s.%f"))

        subfolder = {}
        subfolder["uri"] = "deadbeef0000001/dead0010000001/"
        subfolder["fid"] = 0xdead10010000001
        subfolder["subfolders"] = []
        subfolder["messages"] = []
        subfolder["properties"] = {}
        subfolder["properties"]["PidTagParentFolderId"] = 0xdeadbeef0000001
        subfolder["properties"]["PidTagFolderId"] = subfolder["fid"]
        subfolder["properties"]["PidTagFolderType"] = 1
        subfolder["properties"]["PidTagDisplayName"] = "DEAD-1001"
        subfolder["properties"]["PidTagContainerClass"] = "IPF.Note"
        subfolder["properties"]["PidTagDefaultPostMessageClass"] = "IPM.Note"
        subfolder["properties"]["PidTagSubfolders"] = False
        subfolder["properties"]["PidTagAttributeHidden"] = False
        subfolder["properties"]["PidTagComment"] = "WALKING COMMENT"
        subfolder["properties"]["PidTagContentCount"] = len(subfolder["messages"])
        subfolder["properties"]["PidTagContentUnreadCount"] = len(subfolder["messages"])
        subfolder["properties"]["PidTagChildFolderCount"] = len(subfolder["subfolders"])
        subfolder["message_cache"] = []

        self.mapping[0xdeadbeef0000001] = {}
        self.mapping[0xdeadbeef0000001]["uri"] = "deadbeef0000001/"
        self.mapping[0xdeadbeef0000001]["subfolders"] = [subfolder, ]
        self.mapping[0xdeadbeef0000001]["messages"] = [message1, ]
        self.mapping[0xdeadbeef0000001]["properties"] = {}
        self.mapping[0xdeadbeef0000001]["properties"]["PidTagFolderId"] = 0xdeadbeef0000001
        self.mapping[0xdeadbeef0000001]["properties"]["PidTagDisplayName"] = "SampleMail"
        self.mapping[0xdeadbeef0000001]["properties"]["PidTagComment"] = "Sample Mail Folder"
        self.mapping[0xdeadbeef0000001]["properties"]["PidTagContainerClass"] = "IPF.Note"
        self.mapping[0xdeadbeef0000001]["properties"]["PidTagDefaultPostMessageClass"] = "IPM.Note"
        self.mapping[0xdeadbeef0000001]["properties"]["PidTagAccess"] = 63
        self.mapping[0xdeadbeef0000001]["properties"]["PidTagRights"] = 2043
        self.mapping[0xdeadbeef0000001]["message_cache"] = []

        #
        # Calendar data
        #

        appt1 = {}
        appt1["recipients"] = []
        appt1["attachments"] = []
        appt1["mid"] = 0xcaca00010000001
        appt1["fai"] = False
        appt1["properties"] = {}

        # General properties (read-only)
        appt1["properties"]["PidTagAccess"] = 63
        appt1["properties"]["PidTagAccessLevel"] = 1
        appt1["properties"]["PidTagChangeKey"] = bytearray(uuid.uuid1().bytes + '\x00\x00\x00\x00\x00\x01')
        appt1["properties"]["PidTagCreationTime"] = float((datetime.now(tz=timezone('Europe/Madrid')) - timedelta(hours=1)).strftime("%s.%f"))
        appt1["properties"]["PidTagLastModificationTime"] = appt1["properties"]["PidTagCreationTime"]
        appt1["properties"]["PidTagLastModifierName"] = "julien"
        appt1["properties"]["PidTagObjectType"] = 5
        appt1["properties"]["PidTagRecordKey"] = bytearray(uuid.uuid1().bytes)
        appt1["properties"]["PidTagSearchKey"] = bytearray(uuid.uuid1().bytes)

        appt1["properties"]["PidTagFolderId"] = 0xcacabeef0000001
        appt1["properties"]["PidTagMid"] = appt1["mid"]
        appt1["properties"]["PidTagInstID"] = appt1["mid"]
        appt1["properties"]["PidTagInstanceNum"] = 0
        appt1["properties"]["PidTagRowType"] = 1
        appt1["properties"]["PidTagDepth"] = 0
        appt1["properties"]["PidTagMessageClass"] = "IPM.Appointment"
        appt1["properties"]["PidTagIconIndex"] = 0x400 # single-instance appointment 2.2.1.49 [MS-OXOCAL]
        appt1["properties"]["PidLidSideEffects"] = 0 # 2.2.2.1.16 [MS-OXCMSG]
        # appt1["properties"]["PidLidHeaderItem"] =
        appt1["properties"]["PidTagMessageStatus"] = 0
        appt1["properties"]["PidTagMessageFlags"] = 0
        # appt1["properties"]["PidLidTimeZoneStruct"] = #
        appt1["properties"]["PidLidLocation"] = "Location of the event"
        appt1["properties"]["PidLidAppointmentStateFlags"] = 0 # 2.2.1.10 [MS-OXOCAL]
        appt1["properties"]["PidLidReminderSet"] = True
        #appt1["properties"]["PidLidAppointmentRecur"] =
        appt1["properties"]["PidLidAppointmentSubType"] = False

        appt1["properties"]["PidTagSubject"] = "Meet Sample backend appointment folder"
        appt1["properties"]["PidTagNormalizedSubject"] = appt1["properties"]["PidTagSubject"]
        appt1["properties"]["PidTagHasAttachments"] = False
        appt1["properties"]["PidTagSensitivity"] = 1
        appt1["properties"]["PidTagInternetMessageId"] = "internet-message-id@openchange.org"
        appt1["properties"]["PidTagBody"] = "Description of the event"
        appt1["properties"]["PidTagHtml"] = bytearray(appt1["properties"]["PidTagBody"])
        appt1["properties"]["PidNameKeywords"] = ["Blue Category", "OpenChange", ]
        appt1["properties"]["PidTagMessageDeliveryTime"] = appt1["properties"]["PidTagCreationTime"]
        appt1["properties"]["PidLidAppointmentStartWhole"] = float((datetime.now(tz=timezone('Europe/Madrid')) + timedelta(hours=0)).strftime("%s.%f"))
        appt1["properties"]["PidLidCommonStart"] =  appt1["properties"]["PidLidAppointmentStartWhole"]
        appt1["properties"]["PidLidAppointmentEndWhole"] = float((datetime.now(tz=timezone('Europe/Madrid')) + timedelta(hours=2)).strftime("%s.%f"))
        appt1["properties"]["PidLidCommonEnd"] =  appt1["properties"]["PidLidAppointmentEndWhole"]

        appt1["properties"]["PidLidBusyStatus"] = 2
        appt1["properties"]["PidLidResponseStatus"] = 0

        # Reminder
        appt1["properties"]["PidLidReminderSet"] = True
        appt1["properties"]["PidLidReminderTime"] = appt1["properties"]["PidLidAppointmentStartWhole"]
        appt1["properties"]["PidLidReminderDelta"] = 59
        appt1["properties"]["PidLidReminderSignalTime"] = float((datetime.now(tz=timezone('Europe/Madrid')) + timedelta(minutes=1)).strftime("%s.%f"))
        appt1["properties"]["PidLidReminderPlaySound"] = True

        self.mapping[0xcacabeef0000001] = {}
        self.mapping[0xcacabeef0000001]["uri"] = "cacabeef0000001/"
        self.mapping[0xcacabeef0000001]["properties"] = {}
        self.mapping[0xcacabeef0000001]["properties"]["PidTagFolderId"] = 0xcacabeef0000001
        self.mapping[0xcacabeef0000001]["properties"]["PidTagDisplayName"] = "SampleCalendar"
        self.mapping[0xcacabeef0000001]["properties"]["PidTagComment"] = "Sample Calendar Folder"
        self.mapping[0xcacabeef0000001]["properties"]["PidTagContainerClass"] = "IPF.Appointment"
        self.mapping[0xcacabeef0000001]["properties"]["PidTagDefaultPostMessageClass"] = "IPM.Appointment"
        self.mapping[0xcacabeef0000001]["properties"]["PidTagAccess"] = 63
        self.mapping[0xcacabeef0000001]["properties"]["PidTagRights"] = 2043
        self.mapping[0xcacabeef0000001]["subfolders"] = []
        self.mapping[0xcacabeef0000001]["messages"] = [appt1,]
        self.mapping[0xcacabeef0000001]["message_cache"] = []


        #
        # Contacts data
        #
        ContactPicture = '\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00\xf0\x00\xf0\x00\x00\xff\xe2\x0cXICC_PROFILE\x00\x01\x01\x00\x00\x0cHLino\x02\x10\x00\x00mntrRGB XYZ \x07\xce\x00\x02\x00\t\x00\x06\x001\x00\x00acspMSFT\x00\x00\x00\x00IEC sRGB\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\xf6\xd6\x00\x01\x00\x00\x00\x00\xd3-HP  \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11cprt\x00\x00\x01P\x00\x00\x003desc\x00\x00\x01\x84\x00\x00\x00lwtpt\x00\x00\x01\xf0\x00\x00\x00\x14bkpt\x00\x00\x02\x04\x00\x00\x00\x14rXYZ\x00\x00\x02\x18\x00\x00\x00\x14gXYZ\x00\x00\x02,\x00\x00\x00\x14bXYZ\x00\x00\x02@\x00\x00\x00\x14dmnd\x00\x00\x02T\x00\x00\x00pdmdd\x00\x00\x02\xc4\x00\x00\x00\x88vued\x00\x00\x03L\x00\x00\x00\x86view\x00\x00\x03\xd4\x00\x00\x00$lumi\x00\x00\x03\xf8\x00\x00\x00\x14meas\x00\x00\x04\x0c\x00\x00\x00$tech\x00\x00\x040\x00\x00\x00\x0crTRC\x00\x00\x04<\x00\x00\x08\x0cgTRC\x00\x00\x04<\x00\x00\x08\x0cbTRC\x00\x00\x04<\x00\x00\x08\x0ctext\x00\x00\x00\x00Copyright (c) 1998 Hewlett-Packard Company\x00\x00desc\x00\x00\x00\x00\x00\x00\x00\x12sRGB IEC61966-2.1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12sRGB IEC61966-2.1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00XYZ \x00\x00\x00\x00\x00\x00\xf3Q\x00\x01\x00\x00\x00\x01\x16\xccXYZ \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00XYZ \x00\x00\x00\x00\x00\x00o\xa2\x00\x008\xf5\x00\x00\x03\x90XYZ \x00\x00\x00\x00\x00\x00b\x99\x00\x00\xb7\x85\x00\x00\x18\xdaXYZ \x00\x00\x00\x00\x00\x00$\xa0\x00\x00\x0f\x84\x00\x00\xb6\xcfdesc\x00\x00\x00\x00\x00\x00\x00\x16IEC http://www.iec.ch\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16IEC http://www.iec.ch\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00desc\x00\x00\x00\x00\x00\x00\x00.IEC 61966-2.1 Default RGB colour space - sRGB\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00.IEC 61966-2.1 Default RGB colour space - sRGB\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00desc\x00\x00\x00\x00\x00\x00\x00,Reference Viewing Condition in IEC61966-2.1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00,Reference Viewing Condition in IEC61966-2.1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00view\x00\x00\x00\x00\x00\x13\xa4\xfe\x00\x14_.\x00\x10\xcf\x14\x00\x03\xed\xcc\x00\x04\x13\x0b\x00\x03\\\x9e\x00\x00\x00\x01XYZ \x00\x00\x00\x00\x00L\tV\x00P\x00\x00\x00W\x1f\xe7meas\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x8f\x00\x00\x00\x02sig \x00\x00\x00\x00CRT curv\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x05\x00\n\x00\x0f\x00\x14\x00\x19\x00\x1e\x00#\x00(\x00-\x002\x007\x00;\x00@\x00E\x00J\x00O\x00T\x00Y\x00^\x00c\x00h\x00m\x00r\x00w\x00|\x00\x81\x00\x86\x00\x8b\x00\x90\x00\x95\x00\x9a\x00\x9f\x00\xa4\x00\xa9\x00\xae\x00\xb2\x00\xb7\x00\xbc\x00\xc1\x00\xc6\x00\xcb\x00\xd0\x00\xd5\x00\xdb\x00\xe0\x00\xe5\x00\xeb\x00\xf0\x00\xf6\x00\xfb\x01\x01\x01\x07\x01\r\x01\x13\x01\x19\x01\x1f\x01%\x01+\x012\x018\x01>\x01E\x01L\x01R\x01Y\x01`\x01g\x01n\x01u\x01|\x01\x83\x01\x8b\x01\x92\x01\x9a\x01\xa1\x01\xa9\x01\xb1\x01\xb9\x01\xc1\x01\xc9\x01\xd1\x01\xd9\x01\xe1\x01\xe9\x01\xf2\x01\xfa\x02\x03\x02\x0c\x02\x14\x02\x1d\x02&\x02/\x028\x02A\x02K\x02T\x02]\x02g\x02q\x02z\x02\x84\x02\x8e\x02\x98\x02\xa2\x02\xac\x02\xb6\x02\xc1\x02\xcb\x02\xd5\x02\xe0\x02\xeb\x02\xf5\x03\x00\x03\x0b\x03\x16\x03!\x03-\x038\x03C\x03O\x03Z\x03f\x03r\x03~\x03\x8a\x03\x96\x03\xa2\x03\xae\x03\xba\x03\xc7\x03\xd3\x03\xe0\x03\xec\x03\xf9\x04\x06\x04\x13\x04 \x04-\x04;\x04H\x04U\x04c\x04q\x04~\x04\x8c\x04\x9a\x04\xa8\x04\xb6\x04\xc4\x04\xd3\x04\xe1\x04\xf0\x04\xfe\x05\r\x05\x1c\x05+\x05:\x05I\x05X\x05g\x05w\x05\x86\x05\x96\x05\xa6\x05\xb5\x05\xc5\x05\xd5\x05\xe5\x05\xf6\x06\x06\x06\x16\x06\'\x067\x06H\x06Y\x06j\x06{\x06\x8c\x06\x9d\x06\xaf\x06\xc0\x06\xd1\x06\xe3\x06\xf5\x07\x07\x07\x19\x07+\x07=\x07O\x07a\x07t\x07\x86\x07\x99\x07\xac\x07\xbf\x07\xd2\x07\xe5\x07\xf8\x08\x0b\x08\x1f\x082\x08F\x08Z\x08n\x08\x82\x08\x96\x08\xaa\x08\xbe\x08\xd2\x08\xe7\x08\xfb\t\x10\t%\t:\tO\td\ty\t\x8f\t\xa4\t\xba\t\xcf\t\xe5\t\xfb\n\x11\n\'\n=\nT\nj\n\x81\n\x98\n\xae\n\xc5\n\xdc\n\xf3\x0b\x0b\x0b"\x0b9\x0bQ\x0bi\x0b\x80\x0b\x98\x0b\xb0\x0b\xc8\x0b\xe1\x0b\xf9\x0c\x12\x0c*\x0cC\x0c\\\x0cu\x0c\x8e\x0c\xa7\x0c\xc0\x0c\xd9\x0c\xf3\r\r\r&\r@\rZ\rt\r\x8e\r\xa9\r\xc3\r\xde\r\xf8\x0e\x13\x0e.\x0eI\x0ed\x0e\x7f\x0e\x9b\x0e\xb6\x0e\xd2\x0e\xee\x0f\t\x0f%\x0fA\x0f^\x0fz\x0f\x96\x0f\xb3\x0f\xcf\x0f\xec\x10\t\x10&\x10C\x10a\x10~\x10\x9b\x10\xb9\x10\xd7\x10\xf5\x11\x13\x111\x11O\x11m\x11\x8c\x11\xaa\x11\xc9\x11\xe8\x12\x07\x12&\x12E\x12d\x12\x84\x12\xa3\x12\xc3\x12\xe3\x13\x03\x13#\x13C\x13c\x13\x83\x13\xa4\x13\xc5\x13\xe5\x14\x06\x14\'\x14I\x14j\x14\x8b\x14\xad\x14\xce\x14\xf0\x15\x12\x154\x15V\x15x\x15\x9b\x15\xbd\x15\xe0\x16\x03\x16&\x16I\x16l\x16\x8f\x16\xb2\x16\xd6\x16\xfa\x17\x1d\x17A\x17e\x17\x89\x17\xae\x17\xd2\x17\xf7\x18\x1b\x18@\x18e\x18\x8a\x18\xaf\x18\xd5\x18\xfa\x19 \x19E\x19k\x19\x91\x19\xb7\x19\xdd\x1a\x04\x1a*\x1aQ\x1aw\x1a\x9e\x1a\xc5\x1a\xec\x1b\x14\x1b;\x1bc\x1b\x8a\x1b\xb2\x1b\xda\x1c\x02\x1c*\x1cR\x1c{\x1c\xa3\x1c\xcc\x1c\xf5\x1d\x1e\x1dG\x1dp\x1d\x99\x1d\xc3\x1d\xec\x1e\x16\x1e@\x1ej\x1e\x94\x1e\xbe\x1e\xe9\x1f\x13\x1f>\x1fi\x1f\x94\x1f\xbf\x1f\xea \x15 A l \x98 \xc4 \xf0!\x1c!H!u!\xa1!\xce!\xfb"\'"U"\x82"\xaf"\xdd#\n#8#f#\x94#\xc2#\xf0$\x1f$M$|$\xab$\xda%\t%8%h%\x97%\xc7%\xf7&\'&W&\x87&\xb7&\xe8\'\x18\'I\'z\'\xab\'\xdc(\r(?(q(\xa2(\xd4)\x06)8)k)\x9d)\xd0*\x02*5*h*\x9b*\xcf+\x02+6+i+\x9d+\xd1,\x05,9,n,\xa2,\xd7-\x0c-A-v-\xab-\xe1.\x16.L.\x82.\xb7.\xee/$/Z/\x91/\xc7/\xfe050l0\xa40\xdb1\x121J1\x821\xba1\xf22*2c2\x9b2\xd43\r3F3\x7f3\xb83\xf14+4e4\x9e4\xd85\x135M5\x875\xc25\xfd676r6\xae6\xe97$7`7\x9c7\xd78\x148P8\x8c8\xc89\x059B9\x7f9\xbc9\xf9:6:t:\xb2:\xef;-;k;\xaa;\xe8<\'<e<\xa4<\xe3="=a=\xa1=\xe0> >`>\xa0>\xe0?!?a?\xa2?\xe2@#@d@\xa6@\xe7A)AjA\xacA\xeeB0BrB\xb5B\xf7C:C}C\xc0D\x03DGD\x8aD\xceE\x12EUE\x9aE\xdeF"FgF\xabF\xf0G5G{G\xc0H\x05HKH\x91H\xd7I\x1dIcI\xa9I\xf0J7J}J\xc4K\x0cKSK\x9aK\xe2L*LrL\xbaM\x02MJM\x93M\xdcN%NnN\xb7O\x00OIO\x93O\xddP\'PqP\xbbQ\x06QPQ\x9bQ\xe6R1R|R\xc7S\x13S_S\xaaS\xf6TBT\x8fT\xdbU(UuU\xc2V\x0fV\\V\xa9V\xf7WDW\x92W\xe0X/X}X\xcbY\x1aYiY\xb8Z\x07ZVZ\xa6Z\xf5[E[\x95[\xe5\\5\\\x86\\\xd6]\']x]\xc9^\x1a^l^\xbd_\x0f_a_\xb3`\x05`W`\xaa`\xfcaOa\xa2a\xf5bIb\x9cb\xf0cCc\x97c\xebd@d\x94d\xe9e=e\x92e\xe7f=f\x92f\xe8g=g\x93g\xe9h?h\x96h\xeciCi\x9ai\xf1jHj\x9fj\xf7kOk\xa7k\xfflWl\xafm\x08m`m\xb9n\x12nkn\xc4o\x1eoxo\xd1p+p\x86p\xe0q:q\x95q\xf0rKr\xa6s\x01s]s\xb8t\x14tpt\xccu(u\x85u\xe1v>v\x9bv\xf8wVw\xb3x\x11xnx\xccy*y\x89y\xe7zFz\xa5{\x04{c{\xc2|!|\x81|\xe1}A}\xa1~\x01~b~\xc2\x7f#\x7f\x84\x7f\xe5\x80G\x80\xa8\x81\n\x81k\x81\xcd\x820\x82\x92\x82\xf4\x83W\x83\xba\x84\x1d\x84\x80\x84\xe3\x85G\x85\xab\x86\x0e\x86r\x86\xd7\x87;\x87\x9f\x88\x04\x88i\x88\xce\x893\x89\x99\x89\xfe\x8ad\x8a\xca\x8b0\x8b\x96\x8b\xfc\x8cc\x8c\xca\x8d1\x8d\x98\x8d\xff\x8ef\x8e\xce\x8f6\x8f\x9e\x90\x06\x90n\x90\xd6\x91?\x91\xa8\x92\x11\x92z\x92\xe3\x93M\x93\xb6\x94 \x94\x8a\x94\xf4\x95_\x95\xc9\x964\x96\x9f\x97\n\x97u\x97\xe0\x98L\x98\xb8\x99$\x99\x90\x99\xfc\x9ah\x9a\xd5\x9bB\x9b\xaf\x9c\x1c\x9c\x89\x9c\xf7\x9dd\x9d\xd2\x9e@\x9e\xae\x9f\x1d\x9f\x8b\x9f\xfa\xa0i\xa0\xd8\xa1G\xa1\xb6\xa2&\xa2\x96\xa3\x06\xa3v\xa3\xe6\xa4V\xa4\xc7\xa58\xa5\xa9\xa6\x1a\xa6\x8b\xa6\xfd\xa7n\xa7\xe0\xa8R\xa8\xc4\xa97\xa9\xa9\xaa\x1c\xaa\x8f\xab\x02\xabu\xab\xe9\xac\\\xac\xd0\xadD\xad\xb8\xae-\xae\xa1\xaf\x16\xaf\x8b\xb0\x00\xb0u\xb0\xea\xb1`\xb1\xd6\xb2K\xb2\xc2\xb38\xb3\xae\xb4%\xb4\x9c\xb5\x13\xb5\x8a\xb6\x01\xb6y\xb6\xf0\xb7h\xb7\xe0\xb8Y\xb8\xd1\xb9J\xb9\xc2\xba;\xba\xb5\xbb.\xbb\xa7\xbc!\xbc\x9b\xbd\x15\xbd\x8f\xbe\n\xbe\x84\xbe\xff\xbfz\xbf\xf5\xc0p\xc0\xec\xc1g\xc1\xe3\xc2_\xc2\xdb\xc3X\xc3\xd4\xc4Q\xc4\xce\xc5K\xc5\xc8\xc6F\xc6\xc3\xc7A\xc7\xbf\xc8=\xc8\xbc\xc9:\xc9\xb9\xca8\xca\xb7\xcb6\xcb\xb6\xcc5\xcc\xb5\xcd5\xcd\xb5\xce6\xce\xb6\xcf7\xcf\xb8\xd09\xd0\xba\xd1<\xd1\xbe\xd2?\xd2\xc1\xd3D\xd3\xc6\xd4I\xd4\xcb\xd5N\xd5\xd1\xd6U\xd6\xd8\xd7\\\xd7\xe0\xd8d\xd8\xe8\xd9l\xd9\xf1\xdav\xda\xfb\xdb\x80\xdc\x05\xdc\x8a\xdd\x10\xdd\x96\xde\x1c\xde\xa2\xdf)\xdf\xaf\xe06\xe0\xbd\xe1D\xe1\xcc\xe2S\xe2\xdb\xe3c\xe3\xeb\xe4s\xe4\xfc\xe5\x84\xe6\r\xe6\x96\xe7\x1f\xe7\xa9\xe82\xe8\xbc\xe9F\xe9\xd0\xea[\xea\xe5\xebp\xeb\xfb\xec\x86\xed\x11\xed\x9c\xee(\xee\xb4\xef@\xef\xcc\xf0X\xf0\xe5\xf1r\xf1\xff\xf2\x8c\xf3\x19\xf3\xa7\xf44\xf4\xc2\xf5P\xf5\xde\xf6m\xf6\xfb\xf7\x8a\xf8\x19\xf8\xa8\xf98\xf9\xc7\xfaW\xfa\xe7\xfbw\xfc\x07\xfc\x98\xfd)\xfd\xba\xfeK\xfe\xdc\xffm\xff\xff\xff\xdb\x00C\x00\x06\x04\x05\x06\x05\x04\x06\x06\x05\x06\x07\x07\x06\x08\n\x10\n\n\t\t\n\x14\x0e\x0f\x0c\x10\x17\x14\x18\x18\x17\x14\x16\x16\x1a\x1d%\x1f\x1a\x1b#\x1c\x16\x16 , #&\')*)\x19\x1f-0-(0%()(\xff\xdb\x00C\x01\x07\x07\x07\n\x08\n\x13\n\n\x13(\x1a\x16\x1a((((((((((((((((((((((((((((((((((((((((((((((((((\xff\xc0\x00\x11\x08\x01x\x00\xfa\x03\x01\x11\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1d\x00\x00\x01\x05\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\xff\xc4\x00D\x10\x00\x01\x03\x02\x04\x03\x06\x03\x05\x06\x04\x04\x07\x01\x00\x00\x01\x00\x02\x03\x04\x11\x05\x12!1\x06AQ\x07\x13"aq\x812\x91\xa1\x14#B\xb1\xc1\x08\x15Rb\xd1\xf0$3\xb2\xe1\x16C\x92\xf1\x174Srs\x82\xa2\xc2\xff\xc4\x00\x1a\x01\x01\x00\x03\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\xff\xc4\x00/\x11\x01\x01\x00\x02\x02\x02\x02\x01\x04\x02\x02\x01\x03\x05\x00\x00\x00\x01\x02\x11\x03!\x121\x04A2\x05\x13"Qaq\x14#B34R\x81\x91\xb1\xc1\xf0\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\xfa\x9d\x00\x80@ \x10\x08\x04\x02\x01\x00\x80@ \x10\x08\x04\x02\x01\x00\x80@ \x10\x08\x04\x02\x04@ \x10\x08\x11\x00\x81\x1c\x81\xaaD\xaa\x00\x80@ \x10\x08\x04\x02\x01\x00\x80@ \x10\x08\x04\x02\x01\x00\x80@ \x10\x08\x04\x02\x04@ \x10\x08\x11\x00\x80(\x18\xa4J\xa0\x08\x04\x02\x01\x00\x80@ \x10\x08\x04\x02\x01\x00\x80@ \x10\x08\x04\x02\x01\x00\x80@ \x10"\x01\x00\x81\x10\x08\x02\x81\x8aD\xaa\x00\x80@ \x10\x08\x04\x02\x01\x00\x80@ \x104\xb8\x02\x01\xdc\xec\x81\xc8\x04\x02\x01\x00\x80@ \x10\x08\x04\x02\x01\x02 \x10"\x01\x00P5H\x91@\x10\x08\x04\x02\x01\x00\x80@ \x10! nl\x10d\xe2X\xacTX\xb5\r<\xafh5\x19\x98\xd0O0/\xf9\x02\x83\x8f\xa9\xedC\r\x97\x17}&\x1a\xf14\x118\xb5\xd3\x83\xa4\x8e\x1b\xb5\x9dF\xf7v\xdaiu\x1bM\x8f>\xe2~\xdf\xf0\xba\x1e\'dsAX\xda\x18\x01k\xbb\xb6\x82^\xedok\xdbK\xdb\xe4\x92\x9650/\xda\x13\x87+k)\xa1\x96w69\xdc\xe6\x07\xbd\xa5\xae\x8c\x8d[\x9e\xe06\xce\xd4i\xb5\x85\xf7\xd2P\xf5<\x17\x8a\xf0\xfcN\xa1\x94\xed\x91\xad\x92V\x97\xc0s\x02\xd9\x9a\x00$\xb4\x8f]\xbak\xb2\x0e\x80 T\x02\x01\x00\x80@ \x10\x08\x04\x08\x80@\x88\x04\x02\x06\xd9H\x95@\x10\x08\x11\x00\x80@ \x10\x08\x1b!\xb3\x1cu\xdb\x90\xb9A\xe7\xbcg\xdaN\x11\xc3\xc7\xec\xf8\xa5@\xa4t\x80\xb4:X\xddk\xfc\xbdw\xb6\xdc\xd0\xd3\xe4\x9e\xd1;H\xc6\xb1\xde"\x96\xa2,A\xee\x86;2\x1e\xe9\xc5\xad`- \xe5\xd7C\xa9\x17\xb9\xf2*4\xbb\x8e\x87\x1d\xc4`t\xceeI\x0e\x94\xb73ZF\x99v\x00r\x03K[k)\xd26\xa1[,\xf5\xd3>i^\xe9:\xe9\xf9!{@\x011\x865\xe46\xf7\xd7`v\xba\x1at\xfc3\xc68\xe7\x0e0CGR\x1f\x03$l\xcc\x8eGh\xd7\xb4\x82\x1c\xddn9\x83c\xa8q\x1c\xd0\xd3\xeb~\xc9{l\xc1\xf8\xae*L3\x11{\xe9\xb1\xb1\r\xdf\xde\x00\xd6H\xe1{\xd8\xf5\xb0\xbf!\xf9"\xbe\x9e\xc1\x1b\xb3\xb08\x10A\xda\xc8\x1e\x80@ \x10\x08\x04\x02\x01\x02 \x10"\x01\x00\x81\x10H\x80@\x88\x04\x02\x01\x00\x80@ K\xe9pE\x90|\xb7\xfbLqt\x06I\xf0w\xe5$\x8b>2A\xee\xce\x85\xae\x1dn\t\xfe\xf6\x85\xa4\xd3\xe6\xa6\xd3\xba@f\x8d\x8f\xc8obt\xfe\xc2\xb0i\xa7{\xda\x1e@\xe836\xc3\xe8\xa0\xd2\\\xecd%\xac\x05\xafv\x86\xda\xddJQf/\x19\x9f`G?\xea\x88#\x98X\x00q\x0f\x8f\x7fE\x02Xq\x19\xb0\xb9\x99Q\x85\xd4\xcdO3n\x03\xdal\xe6\xdf\xcco\xea\x85}\r\xfb6v\xb7Q\x0c\xbf\xb8\xb8\x87\x11\xef\xa1{\xaf\x0b\xea]l\x97\xbd\xc0q77\xdf]\xb5E_W\xc5#e\x8d\xaf\x8d\xc1\xcdp\xb8 \xdc\x14\x0f@ \x10\x08\x04\x02\x01\x00\x81\x10\x08\x11\x00\x81\x10H\x80@ D\n\x81\x10\x08\x04\x08\xe3f\x92\x05\xcd\xb6A\xf3go<y\x8fp\xfc\xa7\t\xc0\xea\xa5\x85\x92\x91.g\x0bK\x15\xcd\xcbu\xfc7\x06\xc7\xa5\xc6\xa1B\xd2}\xbei\xae\xab\x9f\x16\xc4\xddQY)\x90\xb8\xdeII\xdf\xd3\x95\xca\x98\xb5k\xe0\x9c-\x88c\xa4\xc7AG\x1ftu\x0f\xb1\xdb\xd4\xeb\xc9g\x97,\xc5\xb6\x1c\x19e\xdb\xb8\xc2\xbb\x1a\xc4\xe6\x88\n\xaa\x86E\x18\xd0\x03su\x95\xf9\x11\xb4\xf8\xb5r^\xc4f`\xbcu\x8c\xb8=\x14\x7f\xc9\x8b\xff\x00\xc3\xda\xadGc5. \n\xc6\xe5;\x90\xddT\x7f\xca\x89\xbf\x06\xa1\xff\x00\xc1\xb1\x03\x1c\xe7\xd7\x12\xe1\xb8\x03u[\xf2\xe2g\xc0\xac\\[\xb3\xbajZg9\xd2H\xd7\xb6\xfae:\xfa+c\xf26\xae\x7f\x0eH\xf3Y\xa3\x97\x0e\xc4~\xe2I"\x927]\x8f\x17i\x1eaucw\x1e~x\xf8\xdd>\x96\xfd\x9a{V\xc4*q\xe8\xb8o\x1f\xc4\x04\xac\x99\xb9i\xa4\x91\xa2\xf9\xbf\x85\xc7\xa9\xe4M\xeet\xba\xb2\x8f\xab\x14\x05@ \x10\x08\x04\x02\x01\x02 \x10"\x01\x00\x81\xe8\x04\x02\x01\x00\x80@\x88\x04\x0c\x9d\xe28^\xf7844\x12I\xd8y\xa0\xf8\xaf\xf6\x99\xc6d\xc4\xb8\xa2\x92\x9a\x9d\x93CM$bV\xc9&\x9d\xf0$\x80\xebom9\xf2\xb6\x9a\x0b\xc2\xdfO/\xe1\xbavWc4\xd4\xa1\x99\x98]\x95\xb7\xdb\xcc\xa8\xca\xea5\xe3\x9eYi\xf5\xa7\x05\xe00ax{#\x85\xad\xb9\x1b\xaf3,\xad\xafbc$\xe9\xd4\x1ab\xe1{_\x95\x95n\xd6\xc6\x94R\x12\xdd\x93Uy\x9cT\x96\x96\xce l\xab\xa5\xbc\x94j(Ia\xbb}\xd4x\xa7\xceG=\x88\xd0\x87\xb1\xedp\xf7\xb2\x8b\xd2\xd3\xf9>}\xed~\x81\x91bM{Yg\x86\xda\xe3e\xdf\xf12\xdcy_\xa8a%\xdb\x83\xc1\xabd\xc3q*z\xd8\x1e\xe8\xeai\xe4l\xb19\xbf\x85\xed \x83\xf4]\x8f-\xfaW\xc2X\xb1\xc7xo\x0e\xc4\x9d\t\x81\xd502S\x19 \xe5\xb8\x07~{\xa0\xd7@ \x10\x08\x04\x02\x01\x02 \x10"\x01\x00\x81\xe8\x04\x02\x01\x00\x80@\x88\x04\x11T\xc4\xd9\xa9\xe4\x89\xe0\x16=\xa5\xa4\x1d\x88(>)\xfd\xaa+&\xa9\xe3\xeax\x8bX\xd7\xc7\x00\x89\xa63p[rv\xb6\x9b\x9fP\xa2{[\xe9\xc1vo\t<IO\x1eB\xe7\xb8\x86\xfa_\x7f\xd1S\x92\xff\x00\x1a\xdb\x82\x7f(\xfb\x1b\x04\x8b-<mv\xe0\r\x97\x99=\xbd\x8b\xd4o\xd39\x8c\xe4\xb6\xc7Q\x8eR\xd2\xdd\x85\xf6\x03B\x9d\'\xb8\xabT\xc0\x1c\x08\x1b(\xb1yn\x99\xf3\xcb`\xe0Z\xab\xb5\xe6,\x1cD\x02\x1c\xebn\xb3\xc9\xa6/\r\xed\x92\x8c\xbe\x16J\xd0\x08u\xc6\x8b\x7f\x8b{\xd3\x97\xe6\xe3\xb9\xb7\x87X\xb5\xd6\xdbU\xe8\xbcW\xe8\x87aX\xa4x\xbfe<;Q\x1d\xee\xcaf\xc0\xeb\xf5\x8f\xc0\x7f$Ew\xa8\x04\x02\x01\x00\x80@\x88\x04\x02\x04@ ,\x81\xe8\x04\x02\x01\x00\x80@ \x10!\x17\x04 \xf8\x7f\xf6\x94\xa3\x9a\x8b\xb4\x8a\x97M\xa3\x0cmtB\xf7\x00y\x7f{\xa8\x8b\xcfJ=\x84S2\xaf\x8c\xdb,\xa37u\x0b\xa4\xb1\xda\xf7\xb0\xfa\x15\x87\xc8\xba\xc1\xd9\xf1f\xf3}\'6-M\x850\xbe\xaeVF9\x02u\'\xc8.\x1c%\xb7\xa7\xa5\x9e\xa4\xec\xcaN;\xc0\x03\xfb\xba\x8a\xd6\xc5!\xd9\xae\x06\xe5uc\xc5\xd7nL\xb9;\xe9\xd2Q\xd6Q\xd7F$\xa4\x99\xafa\xe6\n\x8b\x86\x96\x99\xdf\xb3\xeaLp\xc6\xe7J\xeb\x0b_^J<V\xf2y\xe7\x12q\xf5\x06\x1a\xf3\x1b`|\xce\x17\x047{\xa9\xc7\x8f\xc8\xcb\x96b\xc1\x93\x8a\x9fT\xcc\xf3\xe1\xb5\xf4\xd0\xb8h\xe7\xc2U3\xe0\xbfKq\xf3\xcf\xb6.7OK\x8e\xe1\xb2\xc7v\xca@%\x8e\x07b\xb9\xf1\x99q\xe4\xe8\xcf\xc7\x93\x1d>p\xc4!\xee\xea\x9e\xdbX\xb5\xd6>\xab\xd7\xc6\xeem\xf3\xf9\xcdd\xfb\xab\xf6b\xef\x0fd\x18K\xe4\x00ft\x99m\xd08\x8f\xd1K7\xab\xa0\x10\x08\x04\x02\x01\x00\x80@\x88\x11\x00\x80@\xf4\x02\x01\x00\x80@ \x10\x08\x11\x07\xce_\xb5\'\x01U\xe3\x15\x148\xbe\x1b\x0b\xe6\x91\xdfq \x1a\xda\xc0\x90|\x82\xaeYL{\xad\xb8x\xef%\xf1\x8f(\xec\xc6\x9f\x10\xe1\tf\xc6\xb1\x08b\x14BGR\xbc\xb9\xf9\\\xd7xM\xf5\xe4\xb1\xe7\xfext\xe8\xe0\xbf\xb5\xc9\xac\xde\xa3C\x8f\xd2c\x10K\x8a\xb2\x9a\x92H\xeeDR\xcf)\x19\xc0\xe6\x1b\x96\xe0z\xd8\xac\xf0\xc3\xc3\xad\xf6\xd7?\x91\xbe\xfczs\xfcu\xc4X\x9d,4_l\xc0\xb0\xd7ESn\xeaF\xb9\xae%\xb7\xb0"\xed\x04}m\xa5\xedu\xb7\xede\xf7\x93<y\xe5\xf5\x8a\xd6\x01\xc5.\xc1\xeb\xdfI\x89\xd3KC\x14a\xae2\x00\\\xc6\x926%\xb7\xb7\xa9\xb7\xa2\xc3<\xae>\xddxc2\x9b\x93N\x87\x89\xbbH\xe1\xe3H\xe8\xa1\xc5#\x96r-\xdc\xb2\xe5\xc0\xedk\rI\xbf%[\xe5\xeeBx\xfa\xb5\xe7\xd4\x98\xce%$8\x85e\r\x14"z\x7f\x10l\x9f\x10o\xf1\x06\x81\x98\xfc\xc5\x87%\xa6\x18\xdc\xbd\xab\xcb\x9f\x87\xe3\x8ayx\x8f\x88[\x82\xc1_\x89T\xc2\xdai\x1c\x1b\x91\xb1\x9c\xc7@I\xf1t\xb9\x1e\xa3\x98\xd5_>9\x8ca\x877&_L<{\x89f\xc2 5\x919\xf2A1,.1\x80Z\xeb\x126\xb5\xc1\xb5\x8e\xd6\xdf]\x96w\x0cy?\xdbK\xcb\xc9\xc5\xdd\xf4\xe3\xb1\x1e\x14uf+\x86G\x85=\xd5/\xaf\xa3\x8e\xb2\\\xd6\xfb\xb7<\x9b\x8d6\x01tyL\'n>>;\xcd\x9fO\xb4\xbb\r\xc1F\x01\xd9\xa6\x15B\xd9\x9d0\x19\xdf\x99\xdf\xcc\xf7\x1b\x0f-T\xf1\xe5\xe7\x8c\xaa\xfc\x9e/\xd9\xe5\xb8\x7fN\xf5]\x80@ \x10\x08\x04\x02\x04@ D\x02\x01\x03\xd0\x08\x04\x02\x01\x00\x80@ \x10cqe)\xaa\xc1\'\rngGi\x00\xebcu\x8f<\xde\x17_N\xcf\x83\x9c\xc3\x9eo\xef\xaf\xfe\xef\x9f;J\xe1)1\xdc}\xb8E=C\xa9\xa8\xab)\x83\xe4pff\x89\x98\xeb\x82|\xc8$o\xcb\xc9r\xe3\xc9p\x9aw\xf2pL\xec\xca\xb68S\x86)\xcf\x0f3\x07\xad\x113\x10\xa1\x1d\xdc\xad\x8f@\xe1s\x95\xe3\xc8\x8bk\xd6\xe3pTj[\xb9U\x97\xc7\xf8\xe5\x1d+0\n90\xf6\xc74L\x7fvn\x03\x9cm~\xa0^\xd7[\xcc\xae\xb4jym\xcfb\x98<\x14\x14u\xc4wN3\xb7\xbbln\xb7\x8d\xce\xf0\x86\xdb\xcc\x9b.~I\xd7\xf6\xe9\x99\xcb\xa7/\xc4=\x9b`\xf8N\x05IS\x86\xd1\xb7\xf7\x95\x19l\xdd\xe8\'4\xce\x1a\xb8\x1f]}4O\xdc\xbe\xb7\xd2\'\x067\xb9;\x87\xf0\xfd5\rew\xda\xe1\x9e)\x99#FkY\xc3\xd0\x8eKle\x93G\x96\x19F\xcf\x11a\x98Y\x85\x82CO\x1bI\x17q\xb3G\xcc\xaa\xe7\x95Vx\xe36\xc1\xc6\xb0L/\x1f\xa7\xa7\xa2c$}\x15+\xfb\xd9%\x8c\x16\xb2GX\x80\xd0\xef\xc45$\x91\xb5\x86\xba\xac\xf2\xcb\xc7\xd7\xda\xb8\xe3\xfb\xb7\xbfQW\x81\xb0\x880\xca\xfcA\xef\x8b \xa8y\x8a\x9b\x9eV3@=.>\x81G&w-J\xdb\xe3\xf0\xccw\x94\x9fo\xa6\xb8:\x88a\xfc1\x87S\x0f\xc3\x0bI\xf5:\xfe\xab\xbf\x8b\x1f\x1c$x\xbf3\x93\xf79\xf3\xcb\xfc\xb6V\x8e`\x80@ \x10\x08\x04\x08\x80@\x88\x04\x02\x07\xa0\x10\x08\x04\x02\x01\x00\x80@\x88\x1b+\x04\x91\xb9\x8e\x17k\x85\x88Qf\xe6\x93-\x97q\xe6X\xae\x0f-5}D\xa0\x97\x86\xb8\\\x11\xabm\xf8\x81\xe8A\xfa\xaf3.;\x86U\xf4\x18\xf3\xe3\xcb\xc7\x8aZl6\x82\xb9\xcc\x9a\xaa\x96\x19*\x18\xdc\xad\x90\xb0gh\xe8\x1d\xb8V\xc6K5Yg\x8e\xfbEW\xc3\x18s\xdc\\\xff\x00\xb7\x0f&\xd6\xcc\xd1\xf2\x0eW\xd6\x91$\xaa\xb58\x16\x17O<\x15,\xa5c\xaa#\xd29e%\xefn\x9c\x89\xb9T\xcb\xab\xd3n,U\xb1\xd6\xb9\xf4 \x8d\xdan\xb3\xbf\xdb\xa7\rN\x9c\xd5\x16\x07\x84\xcaMD\x98m$\x92\x92n\xf3\x13K\xaf\xcf\x92\xbe\x19]i\x97\'\x1e7-\xd8\xdb\xa4\xc1\xf0\xc8[\xdfA\x87\xd3C0\x1f\x1bc\x00\xfc\xd5\xafh\x98\xccoJ8\xd3\xc0\x88\x8b\x01n\x8b<\x96\xf5\x13p\xa6\x02++\xe8\xb3e\x91\xf2X\x7f\xf1\xc7\xb9\xb7\x9e\xeax\xf0\xf3\xcam^^o\xda\xe2\xb7\xff\x00\xed\xbd\xcd\xa05\xa1\xa0X\x01`\x17\xa8\xf9\xb2\xa0\x10\x08\x04\x02\x01\x00\x80@\x88\x04\x08\x80@\xf4\x02\x01\x00\x80@ \x10\x08\x04\x02\x0cls\nufg\xc2l\xe7\x0b8^\xd7Xr\xf1\\\xfb\x8e\xcf\x8d\xf2g\x1c\xf1\xc9\xca\xe17c\x9c\xc7hZlB\xe4\xc3\xa7\xa1\x95\xdc\xe9\xabRA\x86\xeb\\\xb2\xe9L=\xb0\xeb\x8b\xe3\x8e\xec\xcaH\xe6\xe1{{]e\xed\xd3,\xfbQ\xc7k\x00\xc2\x9d\x92+\xb9\xed\x036]\xbc\xd5\xee,\xf0\xe4\x9e]\xde\x98X3\x1d.W=\xa1\xa3r\x1b\xa5\xcf[,\xa7U\xd5\x96S]WAR\x18 \xf0\x1eJ\xf6\xed\x8c\xde\xfbrX\xa3_<\xb1D\xdd^\xe7\x00\x00\xeaVZ\xdd[,\xa4z\xef\tp\xdbph\xfb\xc9K_P[\x96\xed\xd9\xa3\xc9w\xf0\xf0\xce>\xfe\xde?\xca\xf9w\x9bX\xcfN\x91n\xe3\x08\x04\x02\x01\x00\x80@ \x10"\x01\x02 \x10=\x00\x80@ \x10\x08\x04\x02\x01\x00\x80A\xc5bt\xff\x00d\xc6\xe6\x03F\xcb\xf7\x83\xdf\x7f\xad\xd7\x0f.>9\xbdO\x8f\x9f\x97\x1f\xfaEU#\xc5\xad\xae\x8a\xb3\xbb\xdb\\\xaf\x8e=2_$\x12:\xf3O\x19\x17\xd89i.3\xd2\xb3\x8f\x97455\x14}\xd3\xe32\x809xJ\x8f;\xb6\xbf\xf13\xd3\x9cee\x15\x15W\x82\xb6\x16\xe66\xb3\x9fo\xa2\x8d\xcb\xed\x17\x87\x97\t\xa6\x8b\xcc\xa0\x93!\x16=\x169I/Mx\xf2\xb7\x1e\xd5\xb0\x86\x898\xa3\r\x0e\xb1o~\xc3oun)\xfc\xe3?\x91\x7f\xeb\xafp^\x93\xc3\x08\x04\x02\x01\x00\x80@ \x10"\x01\x00\x81\x10\x08\x1e\x80@ \x10\x08\x04\x02\x01\x00\x80@ \xe4\xb8\xc4\x98\xeb\xa9\xa4\x1b\x16\x10~\x7f\xee\xb9>G\xe5\x1e\x87\xc3\xfcj\x9ef\xc9\x11\x0e\x17\x04,/n\xa94\xc5\xad\xc0\xe8\xeb\x0fx\xe8\x9a\x1e\x05\xae\x1a\xad\x85t\xe3\xcfx\xff\x00\xcb\x12l\n3#\x98\xe7\xc8\xeb\xe9g\x13o\x92\xd3\xc6\xfbo?Q\xc7\xd7\x8a\xbb0\nZ\x17\x19\xbb\xb1\x9f\x91#A\xe8\x16\x19\xd5o=\xe5\xfa[\x92k\xc0\x18t\xb6\x81RV6)`\xf2\xdb\x8a0\xf7\x0f\x84T\xc6\x0f\xfdA_\x0b\xac\xa3.Y\xbe<\xbf\xd3\xdd\xd7\xa6\xf0\x82\x01\x00\x80@ \x10\x08\x04\x02\x04@ D\x02\x07\xa0\x10\x08\x04\x02\x01\x00\x80@ \x10\x089\xbe/`s\xa9\t\xfea\xf9._\x93=;\xbe\x15\xfc\xa3\x99\x8ac\x0b\x8cRr\xd8\xf5\x0b\x9f[voU~\x9c\x03{\x1fE2&\xe74\x8e\xaa6f\x04|G\x9a\xbd\x97J\xe3f\xd8\xd8\xad\x8cY_\xa3\xb9\xacr\xc6\xb7\xc79/Nj\xa6\xa0fpn\xe0h\xa2be\x97\xf4\x867\xfe\xee0\xd5\xc8/\xdd<J\xe07\xd0\xde\xc9?(e7\x85\x8fv\xc1\xf1\x1a|[\x0c\xa6\xae\xa2x}<\xec\x0fc\xbc\x8a\xf5\xac\xd3\xe7\xd7\x14\x01\x00\x80@ \x10\x08\x04\x02\x04@ D\x02\x07\xa0\x10\x08\x04\x02\x01\x00\x80@ \x10\x088\x8e\'\xc4\xfb\xde \xa7\xa2o\xc0\xc8\xdc\xfb\xf9\xdc\x05\x8f\xca\xc7X\xe2\xeb\xf8Ww&ut&V\xb4\xb7B5:.H\xee\xaa\xb1\xd5\xcd\x03r\xbd\x8esG\xe2n\xf6Zcc,\xa52\\Z=\xdc\\m\xca\xca\xdd#\xb6\x16%\x88\xba{\x88X\xe2O\xe2)\xd5L\xf2Q\xa5\x81\xce\x93\xc4.o{,\xb2m\x84\xbfi1\x883P\xca\x0e\x97i\xba\xce\xc6\xb2\xf4\xe9{\x16\xad\x97\x0e\xe1\x8c\x1a\x82\xac\x90\xc9)\x98\x01q\xd9\xd6\xfd\x7f\xa2\xf7\xb3\xe3\xdf\x1c\xc9\xf3~z\xe4\xb8\xbdYr\xb5\x08\x04\x02\x01\x00\x80@ \x10"\x01\x02 \x10=\x00\x80@ \x10\x08\x04\x02\x01\x04s\xcd\x1c\x0c/\x95\xe1\x8d\x1dJ\x99-\xea"\xd9=\xb1jq\xa3+O\xd8\x9ar^\xdd\xe1\x1b\xfa\x05\xd3\x87\xc7\xd7\xe4\xc7._\xfe.\x03\x8d\xea]\x84c\x18\x1e%?\xfeRW>\x8ew\x9f\xc0_b\xd7\x1f+\xb4\x8fu\x87\xcd\xe3\xf2\xc6Y\xf4\xec\xfd?=eq\xbfn\x840I\x17V\xd9y\x91\xe9\xdfh\x1b\x19i\xb1\x17\nt\x8ad\xf4\xb1\xcb\xbb\x1b{s\t\xa5}2\xaa\xa8\xda\xd0Ih\xdb\xa2\x99\x13\xb4Tt\xa36w\x01\xe4\x95\x7fQ[\x19\xa4\x92x\x0c0\xe9,\xee\x114\xf4.6\xbf\xb0\xd7\xd9_\x8b\x8f\xcf9\x14\xe5\xe5\xf0\xc2\xd6\xa5e+)\x19\x1c1\x8c\xadcCZ\x07+h\xbe\x83\x1fO\x9a\xca\xf6(\xf8\xa7\x12\xc3\xabM;_\xf6\x88A\x03,\xba\xf2\xe4wT\xcf\xe3\xe3\x94\xdc[\x1el\xa5\xd3\xaf\xc3\xf8\xbe\x86r\xd6U\xb5\xf4\xb2\x1d<Z\xb7\xe6\xb92\xf8\xf9c\xeb\xb7F<\xd8\xdfn\x8a\x19c\x9a0\xf8\x9e\xd7\xb0\xec\xe6\x9b\x82\xb0\xb3^\xda\xfb=\x00\x80@ \x10\x08\x11\x00P"\x01\x03\xd0\x08\x04\x02\x01\x00\x80@\xc9$dL.\x91\xc1\xad\x1b\x92RM\xa2\xdd0\xb1\xde#\x8f\x0e\x112\x1az\x8a\xa9\xa5>\x08\xe1m\xdcE\xc0\'R4\x17\x1f\x9a\xdb\x0e\x1b{\xac\xf2\xe5\x93\xd3\x9c\xc5\xebf\x9e\xb1\xedc\xdf$\x05\xa0\x17\xbb\x93\x89\xd8y.\xee>9\x8cr\xe7\x9d\xca\xb50\xe6e\xa7\x89\x84\x00\x0f\x8a\xca\xb9{\xdaq\xf4g\x14`pc\xdc?Y\x85\xd4\x0b6x\xc8\x0e\xfe\x17\rZ\xefb\x01\xf6Xe<\xa5\x95\xb7\x1ew\x0c\xa6Q\xe7\xfc\x05\x8f\xcfE3\xf8\x7f\x1f\xbbk\xa9Ov\x1e\xef\xc4\x06\xda\xf3\xff\x00\xb2\xf2s\xc3\xc2\xe9\xefL\xa7&3(\xf4\x17F\xd7X\xb4\x8b*\xe9]\x9c\x18\x006\xb2\x9d\x1b\xda\x85lc_4LU\xee[\x1cW\xd9\xa3{\xa8\xd2\xdbba"\\o\x89D\x90;-\x15\x03\xbcF\xd7\xce\xf2\x08\xb0\xf4\xddw|L;\xf2p\xfc\xdc\xf5\x8f\x8f\xddo\xe3Q\x839\x1b\x15\xe9\xe0\xf1\xf2q\x95r\xb9\xdc]\r(\x04Z,\xfas\xfe\xec\xb7\xff\x00\xc7l\xff\x00\xf2kT2\xb0}\xacB!\x12\x98\xef\x04\xb20\xb9\xacx\xbe\x8e\x03\xf3Y\xd9\xb9\xd2\xdb\xd5\xed\'\rT\xe2\xc6\x91\xd3\xd4\x9f\xb1\xd5\x07x{\xb7\x0c\xb2\x8b\x0b\x12\x01#_\xf7\xf2\x18\xe5\x84\xbde\x1aL\xac\xef\x17UO\xc4\xb5\xd4\x85\x8d\xc4)\xdb3mw:-\x1c\xdf\xd0\xfd\x16\x17\x82^\xf1k9l\xfc\x9d.\x1b\x89\xd2\xe21g\xa5\x94;\xabN\x84z\x85\xcf\x96\x17\x1fm\xb1\xcae\xe9uU`\x80@ \x10"\x04@ z\x01\x00\x80@ G9\xad\x17q\x00y\xa4\x9b=(Ub9\x1aL\r\x0f\xb1\xb1\'K-q\xe2\xdf\xb6yr\x7fL\x99\xfb\xca\xe8\xe6\x86Y\x00\x94\xeb\x1b\x9dk\x025\x06\xde\xcb\x7f\x19\x86\xacc\xe5r\xea\xa9\x83,\xb7\xfbS\x0clq\xb7vH$\x8e\xa4\x8f\xc8{\xf4\x1bc\xa9\xe9\x9d\xdf\xd9\xf5\x94\xcd\xfb\x00\x8d\xad\x02\xe4\x11e8\xe5\xbc\xb6Y\xd1_x\x9fFz>\xc4z\x8b(\x9d\xec\xbdi\xa7~\xbc\x96M\x1eu\xda\xb7\x0e\x1a\x98[\x8c\xe1\xe3-]8\xf1\xe5\xdd\xcd\x1f\xa8Xs\xf1yM\xbb~\x1f?\x86^\x17\xd5g\xf0\x8f\x13\xcb5#\x1bUsabW\x9bf\x9e\xb5\xc7n\xc6\x1cB)\x85\xd8\xf0=\xd1Mh\xe1\x91\xce\xb97R\x8a\xc2\xe2z\xf2\xc8\xcd=9\xf1\xbbCd[\x19\xf7[<1\x86\xb7\x0c\xc2\xa1\xa7e\x9a\xf3y$<\xdc\xe3\xfd\xdb\xd9z\xfc8xa#\xc3\xf9\x1c\x9f\xb9\xc9i\xf8\xa0\xce\xfdo{.\x8c\\\xb98\xe6\xd3\xbb\xfe:\x13\x9b\x96\xfd\x9c\xb6\xfez\x7fU\xbe\xff\x00\x83=\x7f\'uG\x0b\x0b\x1a\xec\xa33\xb7+\x9e\xb5\x84}+)\xa7|\xedc\x8e\x84\x88\xc1\xb0\xcd\xd7\xfb\xea\xabw\x94\xd2gWhi\x08\x98\x81+~\xfaQ\x9a\xfd\x0f\xfb)\xcajtK\xbfg\xcbG\x0b\xe6\xbcD\x86\xb3@ZlK\xb9\x9b\x85Y\xeb\xb4\xff\x00\xa5\xdaZ\xea\xcaC\x95\x92\x99\xdb\xfc\x13\x9d}\x9d\xbf\xce\xeb<\xb8q\xbe\x97\x9c\x964hx\x86\x9ez\x81OQ\x1c\x94\xb3\x9d\x00\x93\xe1q\xf2+\x0c\xb8r\xc6m\xae<\x92\xf4\xdaY4\x08\x11\x00P"\x01\x03\xd0\x08\x04\x02\nS\xd6\r[\x0e\xae\x1c\xf9-q\xe3\xfb\xac\xf2\xe4\xfe\x99\x13\xce\x1f6S#\x9d(\xdc7[z\xf4\xf7]8\xe3\xa8\xc2\xe5\xbaZw\xbc\xd4<\x18\xd9\xdd\xb9\xb67\xd4\x93\xf9&Rh\x96\xec\xdaL.\x9e\x92C#\x1a]#\xb4/y%\xc7\xdc\xea\x97;z&2vn \x00\x99\xb9E\xae\xaf\x87\xa5r\xf6\x9ah\x9c\xe6\xb6\xd6\xd0h\xab*lV\x99\x85\xf12\xfb\x83uiuQgG\xd7\xd52\x92\x9aJ\x89\x89ll\x176\x17\'\xd1F8\xdc\xae\xa2m\xd4\xddyE7\x13b\xd8\xc7\x18E$\xb1\x06\xe1\x80\xb9\xb4\xf0\x9d\x1b\x9c\x03\xf1\x9e\xa7\xfe\xcb\xbe\xf0\xe3\xc7\xc7d\xf6\xe5\x9c\x97<\xa5uX6\x04\xfa\x8aJ\xa6\xd6a0PT\xb3X\xdf\x03\xbc\x12\\_\xe1\xb9\xb5\x8e\x9f\x92\xf29~>\x19O\xe3\xed\xeap\xfc\xce\\o\xf2\xbb\x8ef\xb6\xa8Q\xb8\x80\xf2\xd2\n\xf2\xad\xd3\xdf\x98\xf9v\xd3\xe1\xecP\xd5\xc7|\xc4\xdbE\x1eFXi\xabK\x86\x1a\xdcHJ\xff\x00\x85\xb6v\xbbz-\xfe6\x17\x93=\xfdG\'\xcb\xe5\x9c\\z\xfb\xaeK\xb4\xae \xe2\x1a\x1cW6\x037w\x05;C^\xde\xed\xael\x8e\xbe\xb7\xb8\xdb\x92\xfaN\x0e,2\xc7\xf9>c\x97\x93)\x97M>\x07\xe2\xb98\x86\x91\xcc\xc4)\xc5={\x05\xdc\xd6\xfc/\x1d[}E\xba{\xfaG/\x0f\xed\xf7=\x1c|\xbe}_m:F\x13\x8fU\x92/\x95\x8d\xd7\xa5\xc6\xca\x99~1y\xee\xbaj&\x9c\xa0\x05\x8di\x17\xe4h\xca\x1aVqeF\xc7\x96b\xd1\xa5\xc1\xb1\n\xdfH\xfb@\xd8\x03#|@\x00\x03y+\xed]!y\x9a:\x86\x1b\xe6\x85\xcd\x16<\xc1\xe6\xa7R\xce\xbd\xa3vU|i\xd9\xe3c\x1aA?\x11>J\xb3\xa5\xab\xaa\xe1\x9cK\xed\xf4!\xb2:\xf3\xc5\xe1\x7f\x9fB\xb8yp\xf0\xbdzuq\xe5\xe5\x1b+&\x84@\x14\x08\x80@\xf4\x02\x01\x05:\xe9\xac;\xa6\x9dN\xeb^<w\xddg\x9eZ\xe9BV\x12\xcb\x03\x97\xa9\x1b\xfb-\xe5cb8\xa2lC,m\r\xe6\xadn\xfd\xa2M\x1e\x18\x1a\xf1abM\xca\x8d\xa4\xf9\x9db5\xd1F0\xb5R\xb0^\xa1\xb6\xe4\x16\x98zW/kb\xc47\xd1f\xb1\x866\x82n4S\xbai\x15]3*!,\x91\xa0\x858\xe5\xe3zE\xc7l\xc1\x80R2\x17\xc5\x1b\x03\\H{\\98lV\x9f\xbd\x97\xb5?n/\xe0\xf3<\xb9\xd0\xce\xdf\x1bt#\xf5\x1eJ\x9c\xb8\xcdn-\x85\xfa\xaf)\xedc\x0f8US\xaa"k\xbe\xc7?\x89\xae\xe4\xd7so\xea\xbc\x8en\x1b2\xdf\xd3\xe8~\x1f\xc9\x99\xf1\xf8\xdfp\x9d\x96\xb0W\xd3\x83\x1d\xdcF\xfeJ\x98p\xdc\xb2\xd4i\xcf\xcf8\xf1\xf2\xae\xde\xb3\x101T>\x92\x85\xa0\x11\xe1t\x83\x7f;\x7fU\xee\xf0\xf0c\xc7\x84|\xdf?>\\\xb9\xee\xa2\x83\x04l\xcc.\x9d\x81\xd9\x8d\xcd\xd6\x97\x93^\x99L?\xb5\x9a\x0e\x1e\xa5\xa1\x97\xbf\x820\x1f\xaf.\xba(\xbc\xd7.\xa98\xe4\xee-\xfe\xef\x8a\x08\xa5\x91\xa0\x99$9\x9c\xe3\xb9U\xf3\xb6\xad\xe3\xa4\xd8u\xae<\x94dE\xe7\x82\xe7\x1b*E\x95\x8e\x93\xb4+} \xb2\xb0\x07\x97[p\x90Vs,\x00<\x8d\xc7\xa2\x9d\xa3JU\r\xcc\x1f{\x7f\xb7/\xe8\xa7f\x95p\xaa\xd7a\xb8\x8cs\xdc\xe4\xbeY\x07V\xaara\xe7\x8e\x96\xc3/\x1b\xb7\xa3\xc6\xf6\xc8\xc6\xbd\x84\x16\xb8\\\x11\xcdy\xfa\xd3\xb0\xa8\x04\x08\x80@\xf4\x02\x06K#b\x8d\xcfv\xc1L\x9b\xba\x88\xb7Sl\xb6\x93#\x8b\xce\xe7U\xd3\xadM0\xde\xee\xce-\xb8\xb2l `\xddN\xd1\xa3H\xf1\x83\xd1>\x90\x86\xac\xd9\xf1\x0e\xae\x01_\x0fU\x19\x19 \xbc\xe5\xc7a\xa2\x99\xe8\xbe\xc0.\xe5\xb8\xd5\x10\x98\xbf3AT\xd2\xc9\n\x84\x9b\xa6\x88+\xd4Fc\x99\xb5\x11\xfcm\xdf\xcc+\xcb\xb9\xe3U\xb3\xbd\xc79\xda\xbd\x0b\xf1N\x12\xaa\x86\x96\x13<\xb35\xaf\x85\x8d\x179\xc1\x1bz\xb72\xc6\xe1r\xc6\xe3\xf7\x1d<<\xb3\x8f\x92e}U.\x10\xc0\xff\x00\xe1\x1e\x19\x8e\x99\xb6ut\xa34\x8f\x1a\xf8\xce\xe0y\x05\xa7\x0f\x14\x93J|\x9e{\xc9\x96\xfe\xbe\x9a8F\x17\x96N\xf2M\\u\xd5tg\x9f\xd3\x97\x1c[\xc1\xa1\xad\x00\x05\x8e\xda\x1dk\x85\x02\xbdH-a\xbe\xca\xf8\xd4U:s\x92\xa6\xdc\x8a\xbd\xee+\x17\xde\xec\x85\x87\x95\xecU5\xb5\xbd\t\xd9\xe2k\xc7"\x92\xfd\x14Kb\x07U\x10\xaa\xd3\xd9\xb1\xbb\xae\xb6V\x88P\x96\xd6\x16\xd7\xc0\x14\x8cz\x8d\xdc\xac\x87W\xc1\x98\xafy\x11\xa0\x99\xdfy\x18\xbcd\xf3\x1d=\x97\'\xc8\xe3\xd5\xf2\x8d\xf8\xb3\xdf\xf1\xae\xa1s7\x05\x02 \x10=\x00\x82\x96*~\xe9\x8d\xbe\xee\xba\xd7\x86w\xb6|\x9e\x95c\xd0\x01\xcdmYD\x9c\xd5RkO\x88\x83\xcdO\xd2\x08A\x04\xa9\x15^;\xca\xa6\x8eL7W\x9db\xa5\xee\xac\x18\x85\xeeU<\x96\xd1\xa5\x82\xe0\r\xd4\xec\xd0\xca4\x00h\x13iH\xed\x82\x84\x9aB \x8f#)\xbfD\x1c\x9f\x17K\x8e~\xe2\x85\x9c4\xdc\xd3:k\x97\xe4k\xdd\x1blO\x848\x81\xa9\xb0\xf4>\xe2\xf6j\xedY\xe9\xbbKM+\xb0\xda\'\xe2\x11\xb5\x95\xa60ekM\xc3_ap=\xd4c\x9fwI\xb8\xff\x00i\xdb\x1eR-\xb2\x9d\xec\xd1\xf6\xb8P\x06\xee\x80sC\x9bk \xc5\x94\x18*2:\xfa\x1c\xcd>Kln\xe3;4\xd0\xa9#\xb8\x06\xe3\xaa\xac\xf6\x9b\xe8\xf6=\xaf\x84\x12F\xd6*,\xed?He\x94\t\xe3m\xf6S\'H\xaa\xd5\xaf\xcbS\x03/\xa1\x0e\xf9\xa9\x9e\x91\xf6\xa6\xe3\x99\xe5\xa3\x93Z\xdf\xa2%\x9b3n\xd2z\xea\xac\x85zz\x89(\xea\xa3\x9e\x03g\xb0\xdc&X\xcc\xa6\xa9.\xae\xe3\xd3p\xba\xd8\xf1\n\x18\xaa#\xd9\xc3Q\xd0\xf3\x0b\xcd\xcf\x1b\x8d\xd5vc\x97\x94\xda\xda\xaa\xc4@ z\x01\x06e{\xb3U\x06\xf2h]\x1cS\xf8\xed\x8f\'\xbd#n\x96WP8\xe8\x906\'\x87\xb0>\xfc\xec\xa6\xcd]"]\xf6Y\xe5\x11\xc7\x98\x85\x12n\xe8\xb7Hi\x1a|nv\xee?E|\xef\xd21\x8b;\x8dVk\xe8\xc1\xa1*PP4@\xae\xf8T\x06\xb9H\x8aCf\x92z)\x88\xa4\xc0\xa3\x1feo\x99q\xfa\x95\x1c\xd7\xb4\xf1\xce\x93WK\x97\xbb\xce\r\x85\xc1Q\x84\xfe\x93\x951\x848i\xb2\xb2\r\x01\x10o2T\x85k\xaf\xa2\n\xf5\xb4\xed\xa8e\x8f\xc46*q\xb6"\xcd\xa8\xc3+\xa0=\xcd@\xbb6\x05^\xf7\xdcW\xd7\xb2\xc9\x9a\x9e\xf6\xf1B\xed\x8fE2\xec\xbd*\x8a\xc6T\xd3E<GrY\xaf"\r\x8f\xd5[\xc7WJ\xefsh\xb1\tI\xae\xc3:=\xef\x07\xd9\xa4\xfe\x8ad\xea\x96\xf7\r\xa6u\xe3\xa8\x90\xf2\xb9\x1f\x92\xad\x89\x8a\xd2\xb4\x88\x99\xe6\x10g\xce,\xac\x87S\xd9\xfdI\xbdU)>\x11i\x1a:r?\xa2\xe5\xf98\xfa\xad\xf8/\xb8\xec\x97#\xa0\x88\x04\x0f@ \xc9\x97\xc5Y)\xf3\xb2\xe9\xc7\xacc\x9f/\xca\x93f\xfb\xab \x8f\xd4]\x05\x06\xbb$\xf3\xc3r/g\xb7\xd0\xff\x00\xba\xd7\xdc\x95\x9f\xdd\x86>W\xce\xda(\xf4\xcd%\xdc\xebl\x00\xddN\xa6;\xa6\xed\xd4j5\xb6m\x82\xc3m4q\xd9\x12i\x1a\xa0B\x80;\x11\xe4\xa5\x04:\x80\x82)\x9c\x00\xd4\xda\xcadE?\x00\xbf\xee\xc6<\xfe\'9\xdbr.*\xbc\xdf\x96\x96\xe3\xfcv\x9e\xad\xad{\x00#Su\x18uS\x935\xc1\xf4\xee\xb8\xb9\x8f\x9f\x92\xd7\xf2g\xe9g0 \x11\xcdUcE\xae\xa5\x06\xec\xeb\x84\x11\xce|\x17n\xe1LEV\x96H\xa4\x8c\x07\x9d\xd5\xa4\xbbE\xaa\xf2\x82)\xa4\x8b6f\xda\xed\xea\x15\xa7\xbd\xa3\xfc9,6\xbd\x90\xc4\xcay\r\xbf\xc4\xcc@\xeb\xe2%t\xe5\x86\xfba2\xfah\xd4M\x9e\xba\x88_\xfc\xb6M/\xff\x00\xc8\xff\x00R\xa6\xb5*\xfb\xee.0e\xc3\xc3y\xc8\xe0\x16w\xda\xff\x00B\xac\x00\xe6G\xd1\xba\xa8\x89\xac\xb9\x9b\x99\xe4y+E[\x9c\x02@\xc4\xaa\x073\x17\xea\x17?\xc9\xfcc^\x0fn\xec\xae\'Q\x10\x08\x1e\x80A\x8a\xd7\xe6\xa8\x9f\xa8q\x0b\xaeO\xe3\x1c\xd6\xf7O\x1c\xc2\x06f\xb1\xb1\xdbe:C/\x14y\xa6\xab\xa4\xa96\x11\x97\x18$\'\x90u\xb2\x9f\xfa\x80\x1e\xeb\\&\xe5\x8ae\xd5\x95-\x1b\x9a\xc9\xf2\x11\xe3e\xc3O\x917\xfd\x139\xb9\xb3\x1e\xabT^\xda\x05\x83R\xd8\x95\x01\xa5\xba\xf2\xb2\x9d\x82\xdc\x8b\x86\xa8\x10\x8f_\x92!\x142\x07\xc6\xe3pK\\[\xb7B\xadf\xaa%T\xaa%\xedx\x1b\xd9_\x19\xa5kO\x0b\x00PD\xd3\xa5\x81\x16\xf7Xr\xfeU\xae\x1f\x89j\x86^\xec\x9e`\xa6\x1ffJ\xee\x01\xcd \x8b\x82\xae\xaa\xb3\x1c\x1b#\xa2\xd4\x96\x80~w\xfe\x8a\xfe\xfbWz\xe9( \xee\xd3\xf3P\x11\xd6\x07\xe0?5"7\x90G\xc0\xa6!N\xa4\x02\x1b\x95\x83_%h\xadS\xac.\x14\x0e1Y\x92\xb5\xdb\xabOh\xfay\x8f\x1a\xd4\xba\x175\xf1\xfd\xdb\xe5\x19X\x1b\xff\x00\xa8\xe3o\xcdv\xf1~5\xcf\x9f\xb7KA/\xdaq\x1a\x974\xf8ac)\xc0\xf3\xf8\x9d\xf9\xb7\xe4\xb0\xcb\xa8\xd6{t,\xfb\xc9!`\xf8Z3\x15\x95i\x0cy\xeff\x9aBl\xd0w\xf2\n\x06yp\xce\x1c\xe1b\xf7X\x0f\xef\xc9^M\xabkK\x82\xde\xe8q\xc6\x8d\x0bec\x9bq\xf3\xfd\x16?&\x7f\x06\xbc7\xf9=\x05y\xee\xb0\x80@\xf4\x02\x0e6\x8e\xb1\xee\xe2\x8cB\x95\xae/\xa7\xb1{\\E\xb2\xbc\x10\x1c\xdf\xabO\xff\x00e\xe8j^)~\xdc{\xbf\xb9ch\x1b\x90G5\x92\xe8\xe4m\xef\xe7\xa2\xb4ER\x95\xac\xac\xa5\x9a\x9a}n\x0b\x1c?U\x7f\xc6\xf9E?)\xaa\xc2\xa1\xab\x99\xb8\xc55%C\xbf\xc4B]\x1c\xae?\x8d\xb9Ik\xfd\xed\xecn\x17FX\xcb\x85\xb1\x94\xb7\xcaJ\xec\xd8.=\x97\ru\x1d`B\x80\xdd/\xc8 I9[\xaa\x98\x8aS\xae\xb7A\x99F\xe76\n\xa2yL\xfb|\xd6\x97\xdcV}\xa4dw\x89\xc7k\xa5\xbd\x9aa\xf1V1\x8baX\x05\x0c\xf8=9\x9c\xc91l\xcfl.\x94\xc6\xdb\x1dr7Ssa\xee\xab\x94\x9ewkK|zn\xe1\xd5UUx=\x05F#\x07\xd9\xea\xa4\x88:H\xadl\x84\xdbKr\xf4T\xc6M\xdd&\xde\xa6\xd3\x03\xc9]\n\xef\x89\xce\x9eG\xb4jZ\x07\xc8\x9f\xea\xad,\x91[7Nk\xc5\x817\x08$\x94\xe8O\x92\x88\x9a\xe48c\x8b\xdb\x8fb5\xb4\x7fdt&\x9f1\x0e/\x0e6k\x8b|C\xf0\x92E\xc0\xe65W\xd2\x9bt3\r\x01\xe9\xaa\x981\xf1\x8a\x96\xd3\xc2\xe2A\xd7Sn\x8a\xf8\xcd\xfaW.\x9eG\x8c\xe3\x14\xb8\xaf\x10@#\x91\x82:7\xf7\xd2\x97~\x0b\x03\xa7\xad\x8f\xd5wa\x8f\x8e\x169r\xcbyGk\xc3\x8c|Xdo\x98Zz\x82fx\xe8\xe7\x1b\xdb\xd8X{.l\xfb\xad\xf1\xf4\xe8\xe1vFH\xfev\xb0YU\xc3\xd8{\xa8\xe1\x1b\xbb\xc4\xe2\x9f\xe5(+\x18^\xc727d\x0ec\x98\xc3\xe7\xfd\xfeJ\xd8\xabY=\x9b\xe1\x93p\xb8\x85\xb5\xd5F\xa6C3\x9e\xf7\x92O\xc45\xdc\x93\xe6|\xc9Y\xe7\x85\xb8X\xbe\x19k)^\xc3\xbe\xcb\xcdv\x84\x02\x07\xa0d\xce\xc9\x13\x9d\xcc\x058\xcd\xdd#+\xa9\xb7\x1a\xe7E\x0f\x17A\x04Y\x84\x92\xd3\xcb<\xbb\x91\xbc`z^\xdfB\xbd\t\x8f\xfdV\xff\x00\x99\xff\x00\xed\xc5o\xfd\x926\xe3#\xc4\xc3\xbbJ\xca\xff\x00m\'\xf4k\xceS\xae\xc7u3\xb2\xb3\xeb\xc9\xa6\x9d\x95\x1f\x81\xde\x07\xfe\x85i\x87\xf2\x9aS.\xae\xd8\x1c]\x0c\xadlX\x9d\x08.\xac\xa2=\xe7v\xdf\xf9\xd1\xfe&z\xdbo5\xb7\r\xf7\x8d\xf5YrO\xfc\xa7\xd3\xb1\xc2gmm\x0c5\x11\x13\x95\xed\x0ehp\xb1\xb1\x17\x17\\\\\x9f\xc6\xea\xbaq\xeeme\xc1\xcd:\x82\xa2]\xa6\xc7(\xec\x1b\x13<h1?\xdeV\xc3\x86\xbfg\xcc\xef\xe0-\xcbo\x86\xd7\xf1_u}\xf4\xaf\xdb\xab\xee\xde\xf0\x08\x16\x1dJ\xcf\xcaE\xf5\xb3\xd9N\xd1\xab\xc9?E\x17;}&c\x15+X\x18\xc9\x1a\xc0\x03yYi\x85\xde\xb6\xa6SJ\xf5\x12\nz<\xce\xe4\x15\xa4\xdeJ\xdb\xa8\x9f\x01k\xdb\x84\xc2d\xff\x000\xdc\x9fRIT\xe6\xb2\xe7W\xe3\xfcV\xabu\x0c\xd3\xaa\xae\t\xcdL\xb6\xc5i\xb5\x16(u{\xaf\xd1S\x93\xd2\xd8\xa5|\x0c7\x05\xa2\xc5VeV\xb8\xc5WA\xcb5\xad\xcc\xad&Jx\xa8A\x17y,\xad\x85\x81\xa4\x00\\l5\xbd\xd6\x96\xean\xa9&\xd2\x18\xd8\xc2\xee\xf4\xdc\xdbEK\x95\xab\xc9#\x9a\xe2 \xc7\x82\xd7\x10\x06Ou\xbf\x0fL\xb9\x1e;\x89aq7\x8c`\x8d\xad"9\xe3\xcf-\xce\xcca$\xfc\xee\x07\xba\xef\xf2\xfe.O\x1e\xde\x87\x87\xcf\xdf\xcf\x13[\xd39\xf2\xe4\x176SQ\xbc\xbb\xad\xf6x\x9a\xd6\x0eg_E\x95]  \xca\xe3\xed\xea\xa1*\x98\xf4\x13\x9c(\x9a[}\xae\'\tc\x04\xeeA\xbd\xbd\xc5\xc7\xba\xd3\x8f\xf2\xef\xd2\x99\xfa\xe9\x0b\'\x8ejFTDs2@\x1c\xd2E\xb4!M\x96]TK\xbe\xde\x89\x80\xd4}\xab\x08\xa6\x97\x9eL\xa7\xd4i\xfa//\x97\x1f\x1c\xecw\xf1\xdd\xe3*\xfa\xcdp\x81\xe8+\xd6\x9f\xba\x03\xaa\xd3\x8f\xda\x99\xfas\xb4\xb0\xfd\xa3\x8b\\\xfd\xbb\x8a;\x0fW\xbf_\xf4\x05\xd7\x9e^<_\xee\xff\x00\xf8sc\x8f\x97\'\xfa\x8d\x89\xa9.nYs\xd5\xa6\xcb\x0cy\x1a\\U\xe5\x8c\x96\x90I\xf7ZJ\xad\x8a\xb5\r\xefatS2\xe1\xcd\xb1\xb6\xaa\xf3\xab\xb8\xad\xeej\xb8\xdcS\x13u\x0bLr\x9b\xcfNF\x87\xfec9\x1f\x92\xec\xc3\x0f.\xe7\xdb\x9f,\xb4\xefp\xa6\x86\xc4\xc6\xec\x0bo\xe8W\x9f\xcdw]|}4[\xbd\x9d\xf3X\x7f\xa6\xaa\xb3\x06\x8a\xf6\x9bjZ-\xf3?\xd5i\x8f\xe3T\xbf\x92\xeb\xb6\xd1e\x175\xfc\x82\x98U*\xe6\xea\xf1m\xc0+^:\xcf6F/ \x1d\xd3\x0e\xdb\x95\xbf\x1c\xf7Y\xe6\xd7\xc1\xc1\x18|A\xfb\x9d~\xab\x9f\x97\xf2\xbak\xc7\xf8\x9fV\xe1\xe1\xbe\xfa\xa6\x10\xc9P:\xe5h\xa2\xcd\x17\xc6\xff\x00E\x9e~\x97\xc1d\xe8\xaa\xb2\t\x0eF\xbd\xdb\x85h\x86f\x0f |\xb3\x1b\xfc-m\xfe\xbf\xd1k\xcb:\x8c\xf8\xefu\x05Y\xcf;\x8bz\xa8\x8bW;\x89^I\xa4\'\xad\x97N\x1dF\x19\xf7\\\'\x1a5\xd4\xb4\xad\x96\x18\xd8\xea\x87\xb8D\xd2M\x8d\x8e\xa4\x03\xe7\x95uq\xf7\\\xf9\xf4\xbf\xc2\x82\xa5\x94\xf9\xea#\x0c\x9d\xf6$\x17\x02\x1a9\x05^I*\xd8Z\xec)b{\x86\xae\xb5\xc5\xb4\xd5at\xd64\xa0\xa1}\x86V\x10z\xb9R\xe7"\xde6\xac\xbb\x0e\xcc\xdf\xbc\x7f\xb0T\xfd\xdf\xe9o\x0f\xed\xc97\x0f\xa8\x8f\x14\x9f\x0c\xa5a{\x1c\xee\xf6!rl\x1cI#\xd0\x10O\xba\xde\xf2O\x1f:\xcaa|\xbcc\xd30z/\xdd\xf8l\x14\xd9\xb3\x167S\xd4\xeeW\x97\xc9\x9f\x9eW\'~\x18\xf8\xc9\x17\x15\x16\x08\x1e\x82\x1a\x98\x8c\xac\xb3M\x9c6V\xc7/\x1a\xaeX\xf9FT\xd2E\x85\xd6\n\xaa\xb6\x98\xdb(\x11\x197h\xb5\xc8\xbf\xd5i\xc9\xcb\x8f\x87u^>\x1c\xf2\xcb\xf8\xcd\xb5!\xa8\x8av\xe6\x86VH\xde\xad \x85\x94\xb2\xfa[,n=XY\x03H \x80}U\xa5\xb1Z\xa7=<n"\xd7\x1e\x85m\x8euK\x8cs\xdcA\x87G4\x0e/lO-\xd8\xbd\xb7\xb2\xea\xe2\xe5\xd5a\xc9\x86\xdb\xb4\xbe\x171sg\xdck\x8f\xb6\x81\x00\xea\xb0j\xca\xc4\xda\xf8\xf1*)\x9aHal\x91\x11\xd4\x9b8\x7f\xa4\xad\xf8\xae\xf1\xb1\x96}YZ\xc4\x8d\x0f\x92\xc1\xaa2nU\xb4\x845`xOPB\xb6\n\xe4\xe7\xaa\x9b\xdf\xd68rh+\xaf\x1e\xa3\x1b\xddo\xd0\x00i\x98\x01\xd2\xcb\x97\x93\xac\x9ba\xe8\x95\xa0Z;y\xdd0\xbe\xcc\x95\xc3B\xd3j,Q\x9b9\xf6\xe8\xb3\xcd|S\x95U\x95\xea\xbf\x0b|\xf5V\xc5Z\xe6xb\xa9\x93Wb\x80^\xd0\xbd\x90\xb8\x7f0\x19\xbf\'\x85\xd3\xcd:\x8cx\xefu}\xe4\xf7\x84\xdbR\xb2j\xe7\xaa\x80t\x92\x7f\xee+\xa3\x1fL+\x98\xe3\x06\xc2\xca\x16\xbe\xa3/t\xc3\x9d\xc5\xc3F\xdb\x9f\x92\xdf\x8e\xeaZ\xcb9\xbb\xa6\x9f\x0e:\x9eX\xe3pk\x0f\x84\x1d\xee\xb2\xe4\xca\xff\x00mq\x91\xd6\xb6\xb6\x8a\x92+\xcb<\x11\x006.\x01r\xe7\x9c\x9f\x95ta\xc7\x96_\x8c\xdb*\xbb\x8d\xb0\xca\x7f\x0c\x1d\xedK\xff\x00\x91\xb6\x1f2\xb8\xf3\xf9\xbcX\xfa\xbbwq~\x9b\xcf\x9f\xb9\xa7+\x8dq\xe6%;\x1c\xda6GH\xd3\xcf\xe3w\xcc\xe9\xf4\\\xb9|\xfc\xafX\xcd;\xf8\xff\x00J\xc3\x1e\xf3\xbbhv)WQ[\x8ecR\xd5L\xf9\xa41\xc7w<\xdc\xeeU\xb89s\xe4\xdf\x95\xdb/\x9d\xc1\xc7\xc51\xf0\x9az\xf2\xe8y\xc1\x00\x81\xe8\x04\x18\\h\xcc\xfc?9\xb7\xc2Z\xef\xa8X|\x89\xbe:\xeb\xf87\\\xd1\xc4Q\xca\xf8l\xe8\x9e\xe6\x1bn\r\x97\x9f2\xb8\xfa\xafk,1\xcf\xac\xa6\xdb\x10c\x95\xd1\xb6\xdd\xe8\x91\xbc\xb3\x8b\xfdV\xd8\xfc\xaeL\x7f\xcb\x97\x93\xe0p\xe5\xf5\xa5\x93\xc4\x8e\x02\xf2\xc0\t\xea\xd7~\x8b\xa7\x0f\x9d>\xe3\x8f?\xd35\xf8\xe4\xc5\xc5x\xb2\x99\xe5\xb0\x08g\xef\x1c\xe0-amO[\xae\xde\x1f\x95\x86W\xa7\x17/\xc0\xe4\xc6[lvp\xba\xc5\xa7\xa2\xde\xc7\x1ch\xb5\xc0\x8b\x8d\x8a\xc3M\xa5S\xc7el\x14-\xa8p\xbbb{I\xf2\x07\xc3\x7fk\xdd[\x86o-)\xc9\xd4\xda\xe3\x1f\x9a6\x1eD^\xea\xb6j\xad/Ekn\xa2\xd4\xabVJ\xd7:\xc3\xf0\x8dJ\xd3\x8f\x1a\xa6U\x8b\x86\x81\'\x7f1?\x11!\xbe\x83C\xf5]\x19\xddj2\xc7\xfbA\xc48\xf8\xe1\xbc\x0e\x96v\xc3\xdf\x19\xa5\xee\x86g\x865\xbb\x9b\x97\x1d\xb6YY\xe5\x9d\xda\xf2\xf8\xe2\xd0\xa1\xc4F-\x85a\xf5\xcd\x89\xd1\n\x98\xc4\x81\x8f\xdc\x03e\x18\xcdn\x19]\xe9d\x95 \x82v\xb1\xe4\x1d\x8ae\x8d\xa4\xcbK\xc0\x87\xb2\xed \x85\x97\xa6\x9e\xd0LE\xc3\x85\xf3Z\xc3\xcdZ"\xb8\xee\x19\x87\xba\x9b\x17\x90\x9f\xf3\xeb\xde\xe2:ekc\xb7\xff\x00\x8b\xfb\xae\x9eK\xbd\x7f\xa68Mo\xfd\xb4\xf1*\xa6\xc3\xa3l_m\x02\xa68\xedl\xb2\xd3\r\xdc\xc9\xdfu\xbcd\xc5\xc7\xa8F\'\x85\xe2\x14\xf2\x1c\xad\x9a\x9d\xf0\x83\xd2\xe2\xd7S\x97\xaf\x14c\xd6^O\x18\xe1\x8a\xc7\xc2#\x8f;\xb2\x7f\r\xf4^\x1f>YN\xa5}\'\x068\xdb.\x9d\xc4R\x870\x1b\xe9e\xe6gk\xd6\xc2Mtk\xddo\xea\xb3j\xa7R\xfb\x8dU\xe2\x99;\xfe\xc0\xda]W\x8e\xc9\xcb\xee\x87\xfa\x97\x7f\xc5\xfby\x1f\xa9\xfb\xc5\xec+\xad\xe5\x04\x02\x07\xa0\x10T\xc5i\xfe\xd5\x86\xd5@\x05\xcb\xe3sG\xad\xb4U\xceyccN,\xbc3\x99\x7fO/\xa5u\xe2o%\xe4>\x92\xa6\xcfkYBteC\x8fvU\xa2\x969*\xc9\x00\xc7\xa8E\xf433\xfdAv|o\xca9>L\xfe\x19\x7f\xa7\xb1\xc2\xeb\xbf)\xe6\xbd\xab:|\xca\xc3%\x96\x13\xb6f\xaa\\fKKbZ\xa1\x16#\x87\xd4R\xbc\xd9\xb31\xcc7\x1b\\YRK\x86S%\xad\x99M\'\xa7\x90GI\x10v\x844\x0b(\xcao*\x99u\x0c|\xc5\xc0\xdb\xc2\x14\xcct\x8bUf9c\x95\xc7l\xa5i\x8f\xb8\xa5W\xa6\x88GI\x13N\xe1\xba\xfe\xaa\xd9]\xd4I\xd2\xd5\x03\x19SA\x96V5\xcc\xef\x1d\xe1p\xb8\xd1\xc5e\xc9\xd6K\xe1\xdc?\x11\x19Doe\xbc \xe8\x9c\x7fp\xcd\x08p\x91\xb7i\xd0\xab\xebJ\x91\xcc\x16\xd8)\xd8\x89\xb2\xf7.\x01\x8f"\xfc\x8e\xcau\xe5\xed\x1b\xd2SX\xd6et\xe3+Zu!W\xc3\xfaZg\xfd\xb0jj\x9b\x13\xa5m5\x8b\x9e\xf7<\xbb\xd4\xadf;\xf6\xa5\xcb^\x94\x1fsr\xf2K\x8e\xa4\x95x\xa1\xb6/\x16\xb5\x94\xfa\x14qR\xe8\xe8*\x0c\x11\x99$ln\xca\xc0m\x98\xdbd\xb7Si\x93\xbd>{\xc2\x1eY+C\x81\x07\xa7E\xe2\xf3\xc7\xd0\xf0Wo\x87N_\x1e\xab\xcc\xcev\xf5\xf0\xbd-\xc8t\x04\x15\x9bE*\x87^\xfdU\xe2\x99=?\xb0\x18\xed\x87\xe3\x12\xff\x00\x14\xedm\xfd\x1b\xfe\xeb\xbf\xe2\xfa\xaf\x17\xf5+\xfc\xe4z\xba\xeay\xc1\x00\x81\xe8\x04\x01A\xe5\x15\x91}\x97\x14\xac\x84\x8c\xb9%u\x87\x917\x0b\xc9\xcek;\x1fG\xc3\x97\x9f\x1e4o\xae\xeb6\xd1\x04\xee!\x84]Z!\xc9\xe2N\x0c\xc5h\xe4v\x81\xb37oP\xba\xfe7\xe5\x1c\x9f*\x7f\n\xf6W\xb1\xc2\xcen\xe1{\x92\xbe^\xadS\xcc\x1e,\xed\x1d\xd1S,t\x99v\x7fv\xdd\xf6*6\x9d\x01\xa0\x03t\x0e("\x96\xc5\xa5\x87c\xa2\x98\x8a\x8eC\x92F\x83\xb5\xac\xa6w\x11z]\xc3@\x14\x80\x01o\x13\xbf2\xb2\xe4\xfc\x9aa\xe8\xb5\x83F\x83\xad\xee\x98\x193\x83\x0cn m\xb8[ol\xf5\xa3\xfcZ\xdc\xe8\xa3\xa1\x8fWU \x9d\xe1\xa1\xa1\xb7\xb0\xb8Z\xe3:V\xd5g\x97\xca\xef\x1c\x8eq\x1c\xb9+zT\x821{[U\t\x126\xdb\xeey \x8eQ\xddEs\xf1\x1d\x92\nF\xee\xb0\x02\xee\xbe\xca\xd7\xd2#\xc8\xbbW\xe1\xb7p\xaf\x17\xbd\xccnZ*\xc3\xdf\xc2@\xd0_\xe2o\xb1\xfaYx\xfc\x93q\xee||\xfaR\xc2\xeanE\x8e\x8b\xce\xe4\x9a{\x1cYn6\x9c\xf0[{{\xac\x1d\no%\xd7\x03Ex\xa5{\x17a1\x16p\xd5s\xf9>\xb1\xd6\xf6kW\x7f\xc5\xfc\x1e\'\xea7\xfe\xd9\xfe\x9e\x92\xba\\\x01\x01t\x0f@ \x10y\xe7\x19S\x98q\xf7\xc9o\x0c\xd1\xb5\xd7\xf3\x1a~\x8b\xcf\xf93Y\xed\xed|\x1c\xf7\xc5\xaf\xe9\x8f\x19\xbd\xee~K\x99\xdf\xbe\x95\xab\x1eCwS\r8\x8e%\xaala\xa4\x90\xd2\r\xc1]|\x1e\xdc\x7f#\xd3\xddp\xda\x91WAMP\xdf\x86h\x9a\xf1\xee.\xbd\x99\xdc\xdb\xe6r\x9a\xbaM$@\x9b\x8d\x0fP\xad*\xb6$\x8aG|/\xdf\x91\xea\xabg\xdcLH,J\x84\x9c\xe4\x0c\xca\x1anu)\xbd\x88g\x17{\x0f-\x95\xb1\xe9\x15\xa1F?\xc3\x0bos\xb7\xaa\xc7?\xc9\xa6>\x8d\xab\xbf\x86\xfbj\xa7\x04d\xa7+\xc3A\'\x92\xd2E\x15e\x96G\x90\xd8\xc7-J\xbc\x92{W{V\x9a\x1b\x87\xb9\xe4\\tS*4\xac\xd6ZV\x1f\xc2tV\x81f!\xa44\x0f\x1a\x06\x08\xedy\x1e\x83>\xa2N\xf5\xf7\xe5\xc9Z a\x99]\x8aS\x07\xe8\xde\xf1\xa3\xea\xa3\x93\xacjp\xfc\xa3\xcf\xbfj\xacJ1_\x81P\xc6~\xf9\x91K+\xc7@K@\xfa\xb4\xaf.\xbd.\'\x99\xf0\xdc\xcet\r.+\x87\x9av\xf6\xbe7q\xd7\xc6\xe0\xe8\xeeu\xba\xe4wT\x0f!\x85\xe4\x9d\x85\x95\xd9m\xec\xfd\x85\xcae\xe1*\x96\xb8\x01\x92\xad\xe0[\x9f\x85\xa7\xf5]\xff\x00\x1b\xf0x\xbf>k\x97\xff\x00\xa3\xd1\x97C\x84 \x10=\x00\x80A\xc9\xf1\xf5=\xe9\xe9jA\xd5\x8f,>\x84\x7f\xb2\xe5\xf9X\xeeJ\xf4\x7fO\xcf\xf9\\?\xb7\x1f\x17\x88\x1dW\x16\x9e\xb6\xd5\xab\x98\\\xc3\xc8(_o2\xe3\xf0\xf6S\x97\xb7\x91]\x7f\x1d\xc5\xf2g[{7e\x15\xaf\xc4;?\xc2&\x90\xe6sc1\xef\xc9\xae-\x1f@\x17\xb1\xc7\x7f\x8c|\xe74\xd6u\xd8\xde\xed\xbf5,\xcc\'\xa2\x90\x81\xcf\xdd5\x10x\x94\x91\xb6\xaa4\x9d\x95\xba\xeaP$\x82\xf6\xe9\xbaB\xb38\x9f\x89\x19\xc38$5n\x81\xf5\x0e\x92n\xe5\xadk\x83E\xcd\xf7\'A\xb1T\xf1\xf2\xcbKyk\x1d\xaf\xd0bQ\xe2\xb8=\x15|Q\xbe8\xea#\x12\x06?\xe2\x00\xf5Lq\xd5\xb0\xb7p\xcb\x19^\x0f-\xd6\xbe\x94\xf6{\xf2\xc4\xcb\x00\xa3\xd9\xe9\x9c\x01{\x9c]\xb1\xe4\xb4\xf4\xa9l\t\x00\x9c\xb6\xd4$\t\x1c!\xb7\x91\xfb\x93\xcd-\xfa#;\x10\xa8\xcc\xee\xed\x9bsV\x91\x16\xa9<\xd9\xa4\xf4V\x88E\x00\xb5D\x19\x9c\x18\x0c\x80\x97\x1f\xc2/\xbag\xea\x98\xfb\x8f\x9e\xbbT\xe2\x16\xf1o\x1e\xd7U@\xf2\xfaf\xbb\xb9\x84\xff\x00#t\x16\xf5\xd4\xfb\xaf\x1f*\xf6x\xb0\xba\xd2L\x16\x13\x14a\xbc\x97\x17-\xddz\xfc\x18\xf8\xc7Q\x0b\x83 \xd4\xea\xb9\x9dV\xa9\xcd!\x94\xd9\xbbf\xb9\xf4VVG\xbcv-\x87IC\xc1\xfd\xec\xad-5s\xbaf\x83\xfc6\r\x1f\xe9^\x87\xc7\xc7X</\x9d\x9c\xcb\x97\xaf\xa7|\xb7q\x84\x08\x82D\x02\x01\x06\x07\x1b\xc0\xe9\xb0\x19K\x01&75\xfat\xbd\x8f\xe6\xb0\xf9\x18\xef\x07_\xc2\xcac\xcb7\xf6\xf3\xcay@\xb0<\xd7\x9f\x1e\xe5\x9fi\'\x1d\xe3t\xd4)6\xe4x\x9f\nmT\x0f\x0f\x1e\x1b-0\xcf\xc6\xa9\xc9\x87\x94mv-\x8d\xc3ON\xfe\x1b\xa9\xfb\xb9\xa2.\x92\x9e\xfb=\xa4\xdc\x8fPI>\x9e\x8b\xd6\xf8\xfc\xb3)\xa7\xcf\xfc\xde\x0b\x86^_OU\x06\xc7\xc9t\xb8O\xb3]k\x1b\x15\x1d\x84-\x17\x1a\xa9\x94!`\xbd\xee\x9b4v\xfbl\x14\x0689\xf7\xb6\x8agG\xb4\xd4\x94\xd1K\x8769X\xc9\x18I\xbb^3\x03\xaa\xcf;\xfc\x97\xc2\x7f\x11X\x00dl\r\xb0\x17\x1e\x1d\xb9)\xc3\xed\x19\xa2e\x83E\x86\x8a\xd5UI\xe5\xccH\x1b+\xc8\x8a\x83\xc5\xc8)BX\xa0\xcb\xe3\x93R\x9b\xfe\x8d(\xe2u\x1d\xdf\xdd\xb0\xeaU\xb1\x9b\xed[Y@s\xe6\xac\x82\xf7E\xe4\x0eCu;\xd0\xa1\x88\xc6\xda\x88%\x88\xfc/ig\xb1\x16Mto\xb7\xcbT\xb4sQ\xe2\xf54\xb3\x8bM\x0c\xaec\xbd\x8a\xf0\xf9\xbf\x8d\xb2\xbe\x8f\xe3k),v\xf8s2\xb0_\xa2\xe2\xca\xed\xe9\xc9\xa8\xbb<\xf9"\'\x97UOii\xf0\xfe\x19&+\x88RPS\x8f\xbc\xa8\x904\x9e\x83\x99\xf6\x17*\xdcx\xf9e\xa59y\'\x16\x17\'\xd3\xf4T\xd1QQ\xc1MN\xd0\xc8a`c\x1a9\x00,\x17\xa9&\xa6\x9f7m\xca\xee\xa6R\x80\x81\x14\x89\x14\x01\x00\x81\x92\xc6\xd9b|r49\x8e\x04\x10y\x84\xb3i\x96\xcb\xb8\xf2\xcc\x7f\x0cv\x1b]$\x06\xe1\xb7\xcc\xc7u\x1c\x97\x99\xcb\xc7\xe1\x96\x9e\xff\x00\xc7\xe6\x9c\xb8o\xedJ\t\x85\xb2\xb9g+k\x15q8\xc3\xe2v\x80\xa9ZW\x9acp\xd6QbP\xd6PK\xddT\xc2\xf0\xe6=\xbb\xde\xeb\xa3\x87;\x8d\xe9\xcf\xf2x\xe6x\xf6\xfaW\x0f|\xb2\xd1@\xea\xa65\x93\x98\xdadkM\xc0u\xb5\x00\xfa\xafk\xd3\xe5\xae\xb6\xb2"\xbe\xb7M\xa3E\r\x00\x94\xd9\xa3N\xa5\x03\xb4\xd9BH\xe7\x86\xb7[\x04\xd6\xc4\x98D\x9d\xed\x18#l\xce\xb7\xcdW\x96k$\xe1z>\xb6\xd6m\xfa\x15\x18\'%\x07\xbe\xc2\xc4\xee\xb5\xd3=\xabfn\x80j\xaf\xa4\x1f\x1b\x0b\x8fF\xf5Qz\x10\xe2u]\xcbC#>2~Jp\xc7fU\x88\xec\xd2<\xb9\xc6\xe4\xad\x14K\x1c%F\xd2uM\xa1\x86\xc3\xe2r\x0c\xb9\x05\xaf\xcd]W\x8bv\x85\x86\n^$elL\xb3*\x9b\xe2?\xcc\xdd\x0f\xd2\xcb\xc9\xfdC\x8f\xc7)\x97\xf6\xf7?K\xe4\xf2\xc6\xe3\xfd\x19K\xfeH;\x15\xe4\xd7\xb5\xb3\xe2\x05\xc4\xb9\xf6\xca6\x08\x88\xf6\xce\xc68l\xd3\xd2\xbb\x1b\xacm\xa5\x9cd\xa7i\x1f\x0b9\xbb\xdf\xf2\xf5]\xbf\x1f\x8fS\xca\xbc\x9f\x9d\xcf\xe5|\'\xd3\xd4\x17K\x80 \x10"\x91"\x80 \x10\x082\xf8\x87\x08\x8f\x17\xa21\xba\xcd\x95\xba\xc6\xfe\x87\xfa*ra3\x9a\xad\xb89\xaf\x16[\x8f\'\xac\x82j*\xb7\xc3;K%a\xb3\x81^fX\xdcn\xab\xde\xc3<y1\xf2\x88\xdc\xe2\xe8\xf7\xba\x89W\xf4\x8f\x04\xc1\xe2\xc48\x82\x9d\xb2\xb0\x16D\xee\xf5\xc1\xc2\xf7\xb6\xc3\xe7e\xd7\xf0\xf0\xf2\xe4\xff\x00N?\xd49|8n\xbe\xfaz\xa8\x16h#\x97%\xec\xbeia\x8e\x05\xa0\x8d\x8a\xad\x89!\xd5\x03\x0b\xb4\xd1Ha.;)A\x8f\xb3\x9a\xec\xc7\xc5k)\x88Y\xc1\x888{l\x0bH&\xe3\xce\xeb>_\xc9~?\xc4\xb8\x83\x87\x831\xb0\x00\xdf\xe8\x9cp\xcd\x9c\x1a\xe9\xe4\xb9\xd1\xbb\x05\xaf\xa6~\xd6\x04m`\x16U\xda\xdaW\xab\xa8\x10\xb0\xdbWr\n\xd2m\x16\xb1\xde\xc7H\\\xf95z\xd2)RS\xc3\x9a\xc9jb\xc3\x83b\x1ej\xa3*\xb1\xc5\xcf\xf2W\x88\xaa\xc1\xa4\x9fMT\xa1\xc2\xf6\x85\x875\xd8W|\xd3s\x1c\x81\xfa\xf4:\x1f\xcc.O\x9f\x8f\x97\x0e\xff\x00\xa7\x7f\xe9\x99\xf8\xf3x\xff\x00n\x1e\x9d\x8e\xcb\x94m\xd7\xa2\xf0+\xe8\xddW\x02\xf0\xeb\xf8\x87\x1d\x86\x91\xa0\x8aX\xec\xf9\xdd\xfc\xa3\x97\xba\xd7\x87\x8f\xce\xb9\xfeO7\xed\xe3\xd7\xb7\xd2\xb0D\xc8!dQ466\x00\xd6\xb4\r\x00^\x83\xc4\xb7g\xa0D\x02\x04R$P\x04\x02\x01\x00\x83\x07\x8a8~,b\x1c\xec\xb4ul\x1e\x07\xf5\xf2>K.^)\x9c\xff\x00.\x8f\x8f\xf2/\r\xff\x00\x0f.\xa8\x82jy\xdf\x14\x8c,\x95\x86\xc4\x11\xb2\xf3\xae7\x1b\xaa\xf71\xceg<\xa3g\x83a\x94\xd7M1\xb6F3/\x9d\xcf\xfd\x97\xa1\xfa~\x17\xca\xe4\xf2\xff\x00U\xe4\x9e\x13\x07r6\x0b\xd3x\xa7D\x05\x9c9rQC\xc0\x17\xb1\xd1BK\x95\xb6\xd9\x00@\xd9\x04S\x00\x1a]m\x94\xc4U<K\x1b\xa1\xc0\xb0\xb1U\x89N!\x85\xef\xca\xdb4\xb8\xb8\x93\xb0\x00\x12Te\x8e\xf2\xd2e\xd4X\xfbL\x18\x85%-U,\x82H%is\\9\x83d\xc3\xad\x99v{@\x00\x00\xa5\x08\xe6~Vi\xa9S!\xb6{\xa2\xb9\xcc\xe3w-6\xa9\x8e\xb6k\xbe\xe3\xcdLE>\x10"\x84\xb9\xda\x1b\xddE\xf6E)\xa5/$y\xa9\x82\xac\x8d\xb9r\xb2\x15\xder\xc6\xee\xa7@\xa6"\xb9^3\x19\xf0:\xd1k\xe5\xcb\xfe\xa0\xb9\xfeo\xfe\x85u\xfe\x9f\xff\x00\xb8\xc5\xe7\xf4\xed.\rkA$\xe8\x00\x1b\x95\xf3\xda\xdb\xe9\xed\x92>\x89\xec\xcb\x87F\x01\xc3\xd1\x99\x99j\xca\x9bI);\x8e\x83\xd8/C\x8b\x0f\x0ct\xf0\xfeG/\xeeg\xbf\xa7^\xb4`\x10"\x01\x02)\x12(\x02\x01\x00\x80@ \xe5\xf8\xc7\x87\xdb\x88\xc4j\xe9\xac\xca\xa6\ro\xa0x\xf3\xf3Yrp\xfe\xe7\xafn\xaf\x8f\xf2o\x0f\xbfH0\x9a\x18\xa8\xa0ll\xd5\xdb\xb9\xdc\xdcW\x7f\x17\x14\xe2\xc7\xc689\xf9\xb2\xe7\xcf\xcb&\x96`7W\xd3"\x87\x01\xb2\x8d\t\x03\xc3\xb6Q\xa4\x95@\x0e\x85H\x8eC\xe06\x17H(\xd4\xe1\x14X\xe6\x14iqH{\xd8[&`\x1a\xe2\xd2\xd3\xd4\x10n4\'\xe6\xa7;\xe3\x97F3s\xb5\xc8\xa8i\xf0\xda*jj(\xf2S\xc4\xdc\x8cm\xefa\xa72\xab\x8d\xdd\xbbNSF9\xd6\x16*\xfaU\x19\xd4\\\xa9B\x07\x8bo\xc9Y\x08%\xf8ny)\x88AW&sf\xdc7\x97\x9a\x94"\x0c\xb3u\xe6\x89A)\xb0*P\xa6\xf1w_\x90\xd5^+\\\xf7\x18G\xdd\xf0\xd5K\x9f\xf1J\xf1\xf2\xb8\\\xdf:\xff\x00\xd3c\xb3\xf4\xf9\xff\x00|\xa7\xf6E\xc2\x9f\xbc*\xc6-[\x17\xf88\x0f\xdc\xb5\xc3\xfc\xc7\x8e~\x83\xf3^G\x0f\x1f\xfeU\xeb|\xbe}\x7f\x0c^\xdc\xba\x9ei\x10\x08\x11\x00\x81\xaaD\xaa\x00\x80@ \x10\x08+b#5#\xc7U~?\xca)\x9f\xe2\xc1\xee\\\xd3v9v\xeeW6\x96"{^\x03^,\xf5[5\xe92\xec\xae\x8f)\xbbM\x94m:\x01\xdah\x9a6s$\xe4TXl\xf0A7P\x93$\x901\xa7\x9a\x996\x8d\x9d\x83\x07\x18f\x0e\xe6\xfb\xea\xab\xcb{\x8bq\xfa>\xb0\xda&\x8eY\x93\t\xd9\x97\xa5CrntZ(k\x8d\x82\n\xef$\xdc\x9d\x95\x90\xabP\xf1p\x01\xb9\xe5eh\x8a\x8aWx\xb4\x07M\x94\xa0\xc9\x1cn\x10V\x92\xe6\xfc\xd4\xc2\x9f\x15+\xa4\x02\xfb\x15;\xd24\xcc\xe2JJz\xe6\nZ\x80\xee\xe4\x10N]\xf4:\xac\xf98\xe7.\x17\x1a\xd3\x8b\x96\xf1g2\xc5\xe9xL\x14\xb4\xd8m<T\rkiZ\xc0#\r\xda\xcb\xce\xd7\x8fN\xbf/.\xd6\xd0"\x00\xa0D\x02\x04\xb2\x94$P\x90\x80@ \x10\x08\x1b+\x04\x91\xb9\xa7b,\xa6]]\xa2\xcd\xf4\xc2pto-p\xd8\xd9v\xcb,\xdb\x96\xf5A\x01\xdb\x84\xf4$a\x0e\x19\\\xabz\xed1\x1b\x9aZt\xd4+oh\xf4k\x86a\xe1@6R\xd3g\r\x13F\xcb#Gv\xe77S\xc9D\xbd\x94\xec\n@\xe8%9\xad\xe2\xe6\xa3\x9aj\xc5\xb8\xefIkH\x03R\x05\xca\xae\t\xc9BI\xda\xdfE\xac\x8c\xedD$\x92Br\x00\x07\x9a\x9dHl\xa6#\xab\xa5p \x0ei\xbf\xe8Q\x04>ro\x9b\x90\xb2\xb7\xd2\xa5\x9c\xb6+\x93\xab\x8f\xba\x9fg\xa5p\xd7\xcc\xe0v\n}#\xdav@\x1b\xba\x8d\xa5+\xde#a\xea\x83\x9b\xac=\xe4\xaep:\xdfu\xa4R\xbb\xbe\r\xa8\x8al\x12(\xe3\xd1\xd0\x92\xc7\x8b\xdf[\xdf\xf5^\x7f\xc8\xc6\xcc\xedvp\xd9qn\xac\x1a\x91\x00\x81\x10\x08\x11\x04\x88\x04\x02\x01\x00\x80@\x8epkK\x8e\xc0]\'eag\xcd#\xcb\xbf\x11\xba\xed\x93Q\xcbn\xe9\xd9:&\xd1\xa0Y\xa6\xa7T\xd9\xa2\x81q}\xc9\xf3P\x93Lb\xfa\x12\x14\xec\xd1\xae\x8c\x9d\xc8)\xb4i\x1b\xa3s\r\xc3\x95\xb7)\xa3\x05M.\x0f\x86\xd5\xd7\xd7J\xc8)c%\xef{\x8e\x81S\x92\xee\xc8\xb6\x13Sa\x95T\x98\xa6\x13I[CP\xd9\xe9\xe7!\xcc\x91\x86\xe1\xc2\xc51\xeb-\x19w\x08\xc8X\xd3r\xddz\x95}\xd54|\xcflL\xb9\xb0\n$\xdak6\xa2g\xcfv\xb2\xf6\xf2ZI\xa5m\xd9\xd0A\x93\x96\xbc\xd2\xd4\x11\xf0\x87H]!\xb9\x1f\x86\xdb)\xdf\xf4i(oAe\x02\x07\xcc\x1b\xe1o\x89\xcaEz\x879\x90\xb9\xe4\xdd\xc7@\xa6!\x87;$k\r\x86\x9dU\xfaWM\x8e\x04\x99\xd4\xf8\xbb\xa0&\xcd\x9d\x87O1\xaf\xf5\\\xff\x00&o\x1d\xff\x00M\xb8.\xb2\xd3\xd0\x97\x03\xac\x88\x02\x81\x10\x08\x11\x04\x88\x04\x02\x01\x00\x80A[\x10qm+\xec\xaf\xc77\x94S?\xc5\x8a\xdc\xc5\xd7\x16\xf7]\x9d9\x93\xc5p\xeb^\xe0\xaa\xd5\xa2b.\x15\x12i\x1a)\r\xb6\xaaPB\x81\xaf\x17\t\n\xa5S\x87\xd3\xe3\xd8=f\x1fP_\xdc\xb9\xc0\x12\xc7X\x82\x08 \x83\xe4G\xd13\xfe6T\xe3\xdc\xb1f\x8b\n\xa7\xc2pjz\x1aL\xfd\xcc\'B\xf7]\xc4\x9b\xdc\x93\xcc\x92I>\xaa\xb3+r\xdal\xd42c\x95\x9a\xad"\x95V{\xca"koa\xba\xbc\xe9[\xd9\xf1\xc4#m\xad\xad\x94[\xb4\xc8q\x16\x08"\x96h\xd8\xd0I\x17\xb2\x99*\x14\xa5\xa92\\\x00m\xe4\xad1F\xd15\xe4l\xcbi\xeaT\xe9\x08\xa73H,\x1a\x1a<\xd4\xc9!\xda\xbc\x91d\x88\xbeG^\xc16h\x9c=7s\x8eR<\x8b\x82\xfc\xbbu\xd3\xf5T\xe6\x9b\xc2\xad\xc7u\x94zj\xf3]\xa4@ D\x02\x06]H\xff\xd9'

        contact1_attachment1 = {}
        contact1_attachment1["properties"] = {}
        contact1_attachment1["properties"]["PidTagMid"] = 0xcada00010000001
        contact1_attachment1["properties"]["PidTagAttachmentContactPhoto"] = True
        contact1_attachment1["properties"]["PidTagAttachNumber"] = 0
        contact1_attachment1["properties"]["PidTagAttachMethod"] = 1
        contact1_attachment1["properties"]["PidTagAttachmentLinkId"] = 0x0
        contact1_attachment1["properties"]["PidTagAttachmentHidden"] = False
        contact1_attachment1["properties"]["PidTagDisplayName"] = "ContactPicture.jpg"
        contact1_attachment1["properties"]["PidTagAttachFilename"] = contact1_attachment1["properties"]["PidTagDisplayName"]
        contact1_attachment1["properties"]["PidTagAttachExtension"] = ".jpg"
        contact1_attachment1["properties"]["PidTagAttachRendering"] = 1
        contact1_attachment1["properties"]["PidTagAttachDataBinary"] = bytearray(ContactPicture)
        contact1_attachment1["properties"]["PidTagAttachSize"] = len(contact1_attachment1["properties"]["PidTagAttachDataBinary"])

        contact1 = {}
        contact1["recipients"] = []
        contact1["mid"] = 0xcada00010000001
        contact1["fai"] = False
        contact1["attachment_cache"] = []
        contact1["properties"] = {}
        contact1["attachments"] = [contact1_attachment1]
        contact1["properties"]["PidTagAccess"] = 63
        contact1["properties"]["PidTagAccessLevel"] = 1
        contact1["properties"]["PidTagChangeKey"] = bytearray(uuid.uuid1().bytes + '\x00\x00\x00\x00\x00\x01')
        contact1["properties"]["PidTagCreationTime"] = float((datetime.now(tz=timezone('Europe/Madrid')) - timedelta(hours=1)).strftime("%s.%f"))
        contact1["properties"]["PidTagLastModificationTime"] = contact1["properties"]["PidTagCreationTime"]
        contact1["properties"]["PidTagObjectType"] = 5
        contact1["properties"]["PidTagRecordKey"] = bytearray(uuid.uuid1().bytes)
        contact1["properties"]["PidTagSearchKey"] = bytearray(uuid.uuid1().bytes)

        contact1["properties"]["PidTagFolderId"] = 0xcadabeef0000001
        contact1["properties"]["PidTagMid"] = contact1["mid"]
        contact1["properties"]["PidTagInstID"] = contact1["mid"]
        contact1["properties"]["PidTagInstanceNum"] = 0
        contact1["properties"]["PidTagRowType"] = 1
        contact1["properties"]["PidTagDepth"] = 0
        contact1["properties"]["PidTagMessageFlags"] = 1 # msfRead
        contact1["properties"]["PidTagMessageClass"] = "IPM.Contact"

        # Full Name
        contact1["properties"]["PidTagDisplayNamePrefix"] = ''
        contact1["properties"]["PidTagGivenName"] = "Julien"
        contact1["properties"]["PidTagMiddleName"] = ''
        contact1["properties"]["PidTagSurname"] = "Kerihuel"
        contact1["properties"]["PidTagDisplayName"] = "%s%s %s %s" % (contact1["properties"]["PidTagDisplayNamePrefix"],
                                                                      contact1["properties"]["PidTagGivenName"],
                                                                      contact1["properties"]["PidTagMiddleName"],
                                                                      contact1["properties"]["PidTagSurname"])
        contact1["properties"]["PidTagCompanyName"] = "OpenChange Project" # Company
        contact1["properties"]["PidTagTitle"] = "Project Founder" # Job tile
        # "<PidTagSurname><space><PidTagGivenName><space><PidTagMiddleName>\r\n<PidTagCompanyName>"
        contact1["properties"]["PidLidFileUnderId"] = 0x8035
        contact1["properties"]["PidLidFileUnder"] =  "%s %s\r\n%s" % (contact1["properties"]["PidTagSurname"],
                                                                         contact1["properties"]["PidTagGivenName"],
                                                                         contact1["properties"]["PidTagCompanyName"]) # File As
        contact1["properties"]["PidTagBody"] = "OpenChange Project Founder and Lead Developer since December, 2003"

        contact1["properties"]["PidLidEmail1AddressType"] = "SMTP"
        contact1["properties"]["PidLidEmail1EmailAddress"] = "j.kerihuel@openchange.org"
        contact1["properties"]["PidLidEmail1OriginalDisplayName"] = contact1["properties"]["PidLidEmail1EmailAddress"]
        contact1["properties"]["PidLidEmail1DisplayName"] = "%s <%s>" % (contact1["properties"]["PidTagDisplayName"],
                                                                         contact1["properties"]["PidLidEmail1EmailAddress"])
        contact1["properties"]["0x901b001f"] = contact1["properties"]["PidLidEmail1DisplayName"]
        contact1["properties"]["PidLidHtml"] = "http://www.openchange.org"
        contact1["properties"]["PidTagBusinessHomePage"] = contact1["properties"]["PidLidHtml"]
        contact1["properties"]["PidLidInstantMessagingAddress"] = "@jkerihuel on irc.freenode.net"
        contact1["properties"]["PidTagBusinessTelephoneNumber"] = "Phone Office"
        contact1["properties"]["PidTagHomeTelephoneNumber"] = "Phone Home"
        contact1["properties"]["PidTagMobileTelephoneNumber"] = "Phone Mobile"
        contact1["properties"]["PidTagBusinessFaxNumber"] = "Fax Office"

        contact1["properties"]["PidTagStreetAddress"] = "Street"
        contact1["properties"]["PidTagLocality"] = "City"
        contact1["properties"]["PidTagStateOrProvince"] = "State/Province"
        contact1["properties"]["PidTagPostalCode"] = "ZIP/Postal code"
        contact1["properties"]["PidTagCountry"] = "France"
        contact1["properties"]["PidLidAddressCountryCode"] = "FR"

        # PidTagPostalAddress
        contact1["properties"]["PidTagPostalAddress"] = "%s\n%s %s %s\n%s" % (contact1["properties"]["PidTagStreetAddress"],
                                                                              contact1["properties"]["PidTagPostalCode"],
                                                                              contact1["properties"]["PidTagLocality"],
                                                                              contact1["properties"]["PidTagStateOrProvince"],
                                                                              contact1["properties"]["PidTagCountry"])

        # Business Address
        contact1["properties"]["PidLidWorkAddressStreet"] = contact1["properties"]["PidTagStreetAddress"]
        contact1["properties"]["PidLidWorkAddressCity"] = contact1["properties"]["PidTagLocality"]
        contact1["properties"]["PidLidWorkAddressState"] = contact1["properties"]["PidTagStateOrProvince"]
        contact1["properties"]["PidLidWorkAddressPostalCode"] = contact1["properties"]["PidTagPostalCode"]
        contact1["properties"]["PidLidWorkAddressCountry"] = contact1["properties"]["PidTagCountry"]
        contact1["properties"]["PidLidWorkAddressCountryCode"] = contact1["properties"]["PidLidAddressCountryCode"]

        # PidLidWorkAddress
        contact1["properties"]["0x90a7001f"] = contact1["properties"]["PidTagPostalAddress"]

        # Contact picture
        contact1["properties"]["PidLidHasPicture"] = True
        contact1["properties"]["PidTagHasAttachments"] = True


        self.mapping[0xcadabeef0000001] = {}
        self.mapping[0xcadabeef0000001]["uri"] = "cadabeef0000001/"
        self.mapping[0xcadabeef0000001]["properties"] = {}
        self.mapping[0xcadabeef0000001]["properties"]["PidTagFolderId"] = 0xcadabeef0000001
        self.mapping[0xcadabeef0000001]["properties"]["PidTagDisplayName"] = "SampleContact"
        self.mapping[0xcadabeef0000001]["properties"]["PidTagComment"] = "Sample Contact Folder"
        self.mapping[0xcadabeef0000001]["properties"]["PidTagContainerClass"] = "IPF.Contact"
        self.mapping[0xcadabeef0000001]["properties"]["PidTagDefaultPostMessageClass"] = "IPM.Contact"
        self.mapping[0xcadabeef0000001]["properties"]["PidTagAccess"] = 63
        self.mapping[0xcadabeef0000001]["properties"]["PidTagRights"] = 2043
        self.mapping[0xcadabeef0000001]["subfolders"] = []
        self.mapping[0xcadabeef0000001]["messages"] = [contact1]
        self.mapping[0xcadabeef0000001]["message_cache"] = []



        #
        # Tasks data
        #
        task1 = {}
        task1["recipients"] = []
        task1["attachments"] = []
        task1["mid"] = 0xcafe00010000001
        task1["fai"] = False
        task1["attachment_cache"] = []
        task1["properties"] = {}

        task1["properties"]["PidTagAccess"] = 63
        task1["properties"]["PidTagAccessLevel"] = 1
        task1["properties"]["PidTagChangeKey"] = bytearray(uuid.uuid1().bytes + '\x00\x00\x00\x00\x00\x01')
        task1["properties"]["PidTagCreationTime"] = float((datetime.now(tz=timezone('Europe/Madrid')) - timedelta(hours=1)).strftime("%s.%f"))
        task1["properties"]["PidTagLastModificationTime"] = task1["properties"]["PidTagCreationTime"]
        task1["properties"]["PidTagLastModifierName"] = "julien"
        task1["properties"]["PidTagObjectType"] = 5
        task1["properties"]["PidTagRecordKey"] = bytearray(uuid.uuid1().bytes)
        task1["properties"]["PidTagSearchKey"] = bytearray(uuid.uuid1().bytes)
        task1["properties"]["PidTagFolderId"] = 0xcafebeef0000001
        task1["properties"]["PidTagMid"] = task1["mid"]
        task1["properties"]["PidTagInstID"] = task1["mid"]
        task1["properties"]["PidTagInstanceNum"] = 0
        task1["properties"]["PidTagRowType"] = 1
        task1["properties"]["PidTagDepth"] = 0
        task1["properties"]["PidTagMessageClass"] = "IPM.Task"
        task1["properties"]["PidTagMessageFlags"] = 1

        task1["properties"]["PidTagSubjectPrefix"] = ''
        task1["properties"]["PidTagSubject"] = "Subject of the task"
        task1["properties"]["PidTagNormalizedSubject"] = task1["properties"]["PidTagSubject"]
        task1["properties"]["PidTagConversationTopic"] = task1["properties"]["PidTagSubject"]
        task1["properties"]["PidTagPriority"] = 1
        task1["properties"]["PidTagImportance"] = 2
        task1["properties"]["PidTagSensitivity"] = 2
        task1["properties"]["PidTagIconIndex"] = 0x500
        task1["properties"]["PidLidTaskStatus"] = 1
        task1["properties"]["PidLidPercentComplete"] = float(0.500000)
        task1["properties"]["PidLidPrivate"] = True
        task1["properties"]["PidLidTaskStartDate"] = float(datetime.now(tz=timezone('Europe/Madrid')).strftime("%s.%f"))
        task1["properties"]["PidLidTaskEndDate"] = float((datetime.now(tz=timezone('Europe/Madrid')) + timedelta(hours=2)).strftime("%s.%f"))
        task1["properties"]["PidNameKeywords"] = ["Green Category", "Orange Category"]
        task1["properties"]["PidTagBody"] = "This task is not very complex. It however tries to fill most of the common and available fields."

        # Reminder
        task1["properties"]["PidLidReminderSet"] = True
        task1["properties"]["PidLidReminderSignalTime"] = float((datetime.now(tz=timezone('Europe/Madrid')) + timedelta(minutes=1)).strftime("%s.%f"))
        task1["properties"]["PidLidReminderTime"] = float((datetime.now(tz=timezone('Europe/Madrid')) + timedelta(minutes=1)).strftime("%s.%f"))

        self.mapping[0xcafebeef0000001] = {}
        self.mapping[0xcafebeef0000001]["uri"] = "cafebeef0000001/"
        self.mapping[0xcafebeef0000001]["properties"] = {}
        self.mapping[0xcafebeef0000001]["properties"]["PidTagFolderId"] = 0xcafebeef0000001
        self.mapping[0xcafebeef0000001]["properties"]["PidTagDisplayName"] = "SampleTask"
        self.mapping[0xcafebeef0000001]["properties"]["PidTagComment"] = "Sample Task Folder"
        self.mapping[0xcafebeef0000001]["properties"]["PidTagContainerClass"] = "IPF.Task"
        self.mapping[0xcafebeef0000001]["properties"]["PidTagDefaultPostMessageClass"] = "IPM.Task"
        self.mapping[0xcafebeef0000001]["properties"]["PidTagAccess"] = 63
        self.mapping[0xcafebeef0000001]["properties"]["PidTagRights"] = 2043
        self.mapping[0xcafebeef0000001]["subfolders"] = []
        self.mapping[0xcafebeef0000001]["messages"] = [task1]
        self.mapping[0xcafebeef0000001]["message_cache"] = []


        #
        # StickyNotes
        #
        note1 = {}
        note1["recipients"] = []
        note1["attachments"] = []
        note1["mid"] = 0xcaba00010000001
        note1["fai"] = False
        note1["attachment_cache"] = []
        note1["properties"] = {}

        note1["properties"]["PidTagAccess"] = 63
        note1["properties"]["PidTagAccessLevel"] = 1
        note1["properties"]["PidTagChangeKey"] = bytearray(uuid.uuid1().bytes + '\x00\x00\x00\x00\x00\x01')
        note1["properties"]["PidTagCreationTime"] = float((datetime.now(tz=timezone('Europe/Madrid')) - timedelta(hours=1)).strftime("%s.%f"))
        note1["properties"]["PidTagLastModificationTime"] = note1["properties"]["PidTagCreationTime"]
        note1["properties"]["PidTagObjectType"] = 5
        note1["properties"]["PidTagRecordKey"] = bytearray(uuid.uuid1().bytes)
        note1["properties"]["PidTagSearchKey"] = bytearray(uuid.uuid1().bytes)
        note1["properties"]["PidTagFolderId"] = 0xcababeef0000001
        note1["properties"]["PidTagMid"] = note1["mid"]
        note1["properties"]["PidTagInstID"] = note1["mid"]
        note1["properties"]["PidTagInstanceNum"] = 0
        note1["properties"]["PidTagRowType"] = 1
        note1["properties"]["PidTagDepth"] = 0
        note1["properties"]["PidTagMessageClass"] = "IPM.StickyNote"
        note1["properties"]["PidTagMessageFlags"] = 1

        note1["properties"]["PidTagSubjectPrefix"] = ''
        note1["properties"]["PidTagNormalizedSubject"] = "This is the subject of the sample note"
        note1["properties"]["PidTagRtfCompressed"] = bytearray(b"\xfa\x00\x00\x00$\x01\x00\x00LZFu\x0e\xc2\x02\xb7\x03\x00\n\x00rcpg125z2\x00\xf5n\x08`\r\xe0\x03p\n\xb0t\x8b\x00\xf2\x0b`n\x0e\x10033\x01\xf7\'\x02\xa4\x03\xe3\x02\x00ch\n\xc0se\x90t0 C\x07@ib\x05\x10M\x02\x80}\n\x80\x08\xc8 ;\to0\xfb\x02\x80\x12\xc2*\t\xb0\t\xf0\x04\x90\x0fP\x05\xb1\x1aR\r\xe0h\t\x80\x01\xd0 14\x00.0.7008./\x0f\xf0\x16\xd0\x02\x82\x15 m\x00\xc0th\x14Pr\x00\xb0w\x15\x80pIn\x07\x01\x00\x020\x16p40}\\vI\x08\x90wk\x0b\x80d4\x0c`c61\n\x84\x0b0c\x00A\x0b\xb42 \x14Th\x04\x00 \x1bqa s\x8d\x00\xc0l\x03 \x0e\xd0te \x05\x00\xd6e\x0fP\t\x80 \x03R \x17\xe0\x1c\x80Tsa\x0f0l\x1c\x80b\x00\xd0k_\t\xf0\x0b1\n\xc0\n\x80\x12\xb1\x00\x1f0")
        note1["properties"]["PidLidNoteColor"] = 1
        note1["properties"]["PidTagIconIndex"] = 0x300 + int(note1["properties"]["PidLidNoteColor"])

        # Positioning and Size
        note1["properties"]["PidLidNoteWidth"] = 320
        note1["properties"]["PidLidNoteHeight"] = 240
        note1["properties"]["PidLidNoteX"] = 564
        note1["properties"]["PidLidNoteY"] = 335

        self.mapping[0xcababeef0000001] = {}
        self.mapping[0xcababeef0000001]["uri"] = "cababeef0000001/"
        self.mapping[0xcababeef0000001]["properties"] = {}
        self.mapping[0xcababeef0000001]["properties"]["PidTagFolderId"] = 0xcababeef0000001
        self.mapping[0xcababeef0000001]["properties"]["PidTagDisplayName"] = "SampleNote"
        self.mapping[0xcababeef0000001]["properties"]["PidTagComment"] = "Sample Note Folder"
        self.mapping[0xcababeef0000001]["properties"]["PidTagContainerClass"] = "IPF.StickyNote"
        self.mapping[0xcababeef0000001]["properties"]["PidTagDefaultPostMessageClass"] = "IPM.StickyNote"
        self.mapping[0xcababeef0000001]["properties"]["PidTagAccess"] = 63
        self.mapping[0xcababeef0000001]["properties"]["PidTagRights"] = 2043
        self.mapping[0xcababeef0000001]["subfolders"] = []
        self.mapping[0xcababeef0000001]["messages"] = [note1]
        self.mapping[0xcababeef0000001]["message_cache"] = []

        print '[PYTHON]: %s context class __init__' % self.name
        return

    def get_path(self, fmid):
        print '[PYTHON]: %s context.get_path' % self.name
        if fmid in self.mapping:
            print '[PYTHON]: %s get_path URI: %s' % (self.name, self.mapping[fmid]["uri"])
            return self.mapping[fmid]["uri"]
        else:
            print '[Python]: %s get_path URI: None' % (self.name)
            return None

    def get_root_folder(self, folderID):
        print '[PYTHON]: %s context.get_root_folder' % self.name
        folder = FolderObject(self.mapping[folderID], None, folderID, 0x0)
        return (0, folder)


class FolderObject(ContextObject):

    def __init__(self, basedict, parentdict, folderID, parentFID):
        print '[PYTHON]: %s folder.__init__(fid=%s)' % (self.name, folderID)
        self.basedict = basedict
        self.parentdict = parentdict
        self.parentFID = parentFID;
        self.folderID = folderID;
        return

    def open_folder(self, folderID):
        print '[PYTHON]: %s folder.open_folder(0x%x)' % (self.name, folderID)

        for item in self.basedict["subfolders"]:
            if str(item["fid"]) == str(folderID):
                print '[PYTHON]: folderID 0x%x found\n' % (folderID)
                return FolderObject(item, self.basedict, folderID, self.folderID)
        return None

    def create_folder(self, properties, folderID):
        print '[PYTHON]: %s folder.create_folder(%s)' % (self.name, folderID)
        j = json.dumps(properties, indent=4)
        print '[PYTHON]: %s ' % j

        folder = {}
        folder["uri"] = "%s/0x%x" % (self.basedict["uri"], folderID)
        folder["fid"] = folderID
        folder["properties"] = {}
        folder["properties"]["PidTagFolderId"] = folder["fid"]
        if properties.has_key("PidTagDisplayName"):
            folder["properties"]["PidTagDisplayName"] = properties["PidTagDisplayName"]
        if properties.has_key("PidTagComment"):
            folder["properties"]["PidTagComment"] = properties["PidTagComment"]
        folder["subfolders"] = []
        folder["messages"] = []
        folder["message_cache"] = []

        self.basedict["subfolders"].append(folder)

        return (0, FolderObject(folder, self.basedict, folderID, self.folderID))

    def delete(self):
        print '[PYTHON]: %s folder.delete(%s)' % (self.name, self.folderID)
        for item in self.parentdict["subfolders"]:
            if str(item["fid"]) == str(self.folderID):
                self.parentdict["subfolders"].remove(item)
                return 0
        return 17

    def open_table(self, table_type):
        print '[PYTHON]: %s folder.open_table' % (self.name)
        table = TableObject(self, table_type)
        return (table, self.get_child_count(table_type))

    def get_child_count(self, table_type):
        print '[PYTHON]: %s folder.get_child_count' % (self.name)
        counter = { 1: self._count_folders,
                    2: self._count_messages,
                    3: self._count_zero,
                    4: self._count_zero,
                    5: self._count_zero,
                    6: self._count_zero
                }
        return counter[table_type]()

    def _count_folders(self):
        print '[PYTHON][INTERNAL]: %s folder._count_folders(0x%x): %d' % (self.name, self.folderID, len(self.basedict["subfolders"]))
        return len(self.basedict["subfolders"])

    def _count_messages(self):
        print '[PYTHON][INTERNAL]: %s folder._count_messages(0x%x): %d' % (self.name, self.folderID, len(self.basedict["messages"]))
        return len(self.basedict["messages"])

    def _count_zero(self):
        return 0

    def open_message(self, mid, rw):
        print '[PYTHON]: %s folder.open_message()' % self.name

        for item in self.basedict["messages"]:
            if str(item["mid"]) == str(mid):
                print '[PYTHON]: messageID 0x%x found\n' % (mid)
                tmpmsg = item.copy()
                self.basedict["message_cache"].append(tmpmsg)
                return MessageObject(item, self, mid, rw)
        return None

    def create_message(self, mid, associated):
        print '[PYTHON]: %s folder.create_message()' % self.name
        newmsg = {}
        newmsg["recipients"] = []
        newmsg["attachments"] = []
        newmsg["mid"] = mid
        newmsg["fai"] = associated
        newmsg["attachment_cache"] = []
        newmsg["properties"] = {}
        newmsg["properties"]["PidTagMessageId"] = newmsg["mid"]
        self.basedict["message_cache"].append(newmsg)
        return MessageObject(newmsg, self, mid, 1)

    def get_properties(self, properties):
        print '[PYTHON]: %s folder.get_properties()' % (self.name)
        print properties
        return self.basedict["properties"]

    def set_properties(self, properties):
        print '[PYTHON]: %s folder.set_properties()' % (self.name)

        tmpdict = self.basedict["properties"].copy()
        tmpdict.update(properties)
        self.basedict["properties"] = tmpdict

        print self.basedict["properties"]
        return 0

class TableObject(BackendObject):

    def __init__(self, folder, tableType):
        print '[PYTHON]: %s table.__init__()' % (self.name)
        self.folder = folder
        self.tableType = tableType
        self.properties = []
        return

    def set_columns(self, properties):
        print '[PYTHON]: %s table.set_columns()' % (self.name)
        self.properties = properties
        print 'properties: [%s]\n' % ', '.join(map(str, self.properties))
        return 0

    def get_row(self, rowId, query_type):
        print '[PYTHON]: %s table.get_row()' % (self.name)

        rowdata = None
        if self.tableType == 1:
            subfolders = self.folder.basedict["subfolders"]
            if (len(subfolders) > rowId and
                subfolders[rowId] and
                subfolders[rowId].has_key("properties")):
                rowdata = subfolders[rowId]["properties"]
        elif self.tableType == 2:
            messages = self.folder.basedict["messages"]
            if (len(messages) > rowId and
                messages[rowId] and
                messages[rowId].has_key("properties")):
                rowdata = messages[rowId]["properties"]
        elif self.tableType == 5:
            attachments = self.folder.message["attachments"]
            if (len(attachments) > rowId and
                attachments[rowId] and
                attachments[rowId].has_key("properties")):
                rowdata = attachments[rowId]["properties"]
        return (self.properties, rowdata)


    def get_row_count(self, query_type):
        print '[PYTHON]: %s table.get_row_count()' % (self.name)
        return self.folder.get_child_count(self.tableType)

class MessageObject(BackendObject):

    def __init__(self, message, folder, mid, rw):
        print '[PYTHON]: %s message.__init__()' % (self.name)
        self.folder = folder
        self.message = message
        self.mid = mid
        self.rw = rw

        return

    def get_message_data(self):
        print '[PYTHON]: %s message.get_message_data()' % (self.name)
        return (self.message["recipients"], self.message["properties"])

    def get_properties(self, properties):
        print '[PYTHON]: %s message.get_properties()' % (self.name)
        return self.message["properties"]

    def set_properties(self, properties):
        print '[PYTHON]: %s message.set_properties()' % (self.name)

        tmpdict = self.message["properties"].copy()
        tmpdict.update(properties)
        self.message["properties"] = tmpdict;

        print self.message["properties"]
        return 0

    def save(self):
        print '[PYTHON]: %s message.save()' % (self.name)
    
        for item in self.folder.basedict["message_cache"]:
            if str(item["mid"]) == str(self.mid):
                for ex_item in self.folder.basedict["messages"]:
                    if str(ex_item["mid"]) == str(self.mid):
                        self.folder.basedict["messages"].remove(ex_item)
                self.folder.basedict["messages"].append(item)
                self.folder.basedict["message_cache"].remove(item)
                return 0
        return 17

    def _count_attachments(self):
        print '[PYTHON][INTERNAL]: %s message._count_folders(0x%x): %d' % (self.name, self.mid, len(self.message["attachments"]))
        return len(self.message["attachments"])

    def get_child_count(self, table_type):
        print '[PYTHON]: %s message.get_child_count' % (self.name)
        counter = { 5: self._count_attachments }
        return counter[table_type]()

    def open_attachment(self, attach_id):
        print '[PYTHON]: %s message.open_attachment(): %d/%d' % (self.name, attach_id,
                                                                 len(self.message["attachments"]))
        if attach_id > len(self.message["attachments"]):
            return None
        return AttachmentObject(self.message["attachments"][attach_id], self, attach_id)

    def delete_attachment(self, attach_id):
        print '[PYTHON]: %s message.delete_attachment %d/%d' % (self.name, attach_id+1,
                                                                len(self.message["attachments"]))
        if attach_id > len(self.message["attachments"]):
            return None
      
        del self.message["attachments"][attach_id]
        
        attachment_count = len(self.message["attachments"])
        self.message["properties"]["PidTagContentCount"] = attachment_count
      
        if attachment_count is 0:
            self.message["properties"]["PidTagHasAttachments"] = False
        return 0

    def get_attachment_table(self):
        print '[PYTHON]: %s message.get_attachment_table()' % (self.name)
        table = TableObject(self, 5)
        return (table, self.get_child_count(5))


class AttachmentObject(BackendObject):

    def __init__(self, attachment, message, attachid):
        print '[PYTHON]: %s attachment.__init__()' % (self.name)
        print attachment
        self.attachment = attachment
        self.message = message
        self.attachid = attachid
        return

    def get_properties(self, properties):
        print '[PYTHON]: %s message.get_properties()' % (self.name)
        return self.attachment["properties"]



###################################################################################################################################
####### Provision Code ############################################################################################################
###################################################################################################################################


class OpenchangeDBWithMySQL():
    def __init__(self, uri):
        self.uri = uri
        self.db = self._connect_to_mysql(uri)

    def _connect_to_mysql(self, uri):
        if not uri.startswith('mysql://'):
            raise ValueError("Bad connection string for mysql: invalid schema")

        if '@' not in uri:
            raise ValueError("Bad connection string for mysql: expected format "
                             "mysql://user[:passwd]@host/db_name")
        user_passwd, host_db = uri.split('@')

        user_passwd = user_passwd[len('mysql://'):]
        if ':' in user_passwd:
            user, passwd = user_passwd.split(':')
        else:
            user, passwd = user_passwd, ''

        if '/' not in host_db:
            raise ValueError("Bad connection string for mysql: expected format "
                             "mysql://user[:passwd]@host/db_name")
        host, db = host_db.split('/')

        return MySQLdb.connect(host=host, user=user, passwd=passwd, db=db)

    def select(self, sql, params=()):
        try:
            cur = self.db.cursor()
            cur.execute(sql, params)
            rows = cur.fetchall()
            cur.close()
            self.op_error = False
            return rows
        except MySQLdb.OperationalError as e:
            # FIXME: It may be leaded by another error
            # Reconnect and rerun this
            if self.op_error:
                raise e
            self.db = self._connect_to_mysql(self.uri)
            self.op_error = True
            return self.select(sql, params)
        except MySQLdb.ProgrammingError as e:
            print "Error executing %s with %r: %r" % (sql, params, e)
            raise e

    def insert(self, sql, params=()):
        self.delete(sql, params)

    def delete(self, sql, params=()):
        cur = self.db.cursor()
        cur.execute(sql, params)
        self.db.commit()
        cur.close()
        return

if __name__ == '__main__':
    parser = optparse.OptionParser("sample.py [options]")

    sambaopts = options.SambaOptions(parser)
    parser.add_option_group(sambaopts)

    parser.add_option("--status", action="store_true",
                      help="Status of sample backend for specified user")
    parser.add_option("--provision", action="store_true",
                      help="Provision sample backend for specified user")
    parser.add_option("--deprovision", action="store_true",
                      help="Deprovision sample backend for specified user")
    parser.add_option("--username", type="string", help="User mailbox to update")

    opts,args = parser.parse_args()
    if len(args) != 0:
        parser.print_help()
        sys.exit(1)

    lp = sambaopts.get_loadparm()

    username = opts.username
    if username is None:
        print "[ERROR] No username specified"
        sys.exit(1)
    if username.isalnum() is False:
        print "[ERROR] Username must be alpha numeric"
        sys.exit(1)

    openchangedb_uri = lp.get("mapiproxy:openchangedb")
    if openchangedb_uri is None:
        print "This script only supports MySQL backend for openchangedb"

    if opts.provision and opts.deprovision:
        print "[ERROR] Incompatible options: provision and deprovision"
        sys.exit(1)


    c = OpenchangeDBWithMySQL(openchangedb_uri)
    backend = BackendObject()

    # namespace like
    nslike = backend.namespace + '%'

    # Retrieve mailbox_id, ou_id
    rows = c.select("SELECT id,ou_id FROM mailboxes WHERE name=%s", username)
    if len(rows) == 0:
        print "[ERROR] No such user %s" % username
        sys.exit(1)
    mailbox_id = rows[0][0]
    ou_id = rows[0][1]

    rows = c.select("SELECT * FROM folders WHERE MAPIStoreURI LIKE %s AND mailbox_id=%s AND ou_id=%s",
                    (nslike, mailbox_id, ou_id))

    if opts.status:
        if (rows):
            print "[INFO] Sample backend is provisioned for user %s the following folders:" % username
            for row in rows:
                name = c.select("SELECT value FROM folders_properties WHERE name=\"PidTagDisplayName\" AND folder_id=%s", row[0])
                print "\t* %-40s (%s)" % (name[0][0], row[len(row) - 1])
        else:
            print "[INFO] Sample backend is not provisioned for user %s" % username
        sys.exit(0)

    if opts.provision:
        if (rows):
            print "[WARN] Sample backend is already provisioned for user %s" % username
            sys.exit(0)

        rows = c.select("SELECT id,folder_id FROM folders WHERE SystemIdx=12 AND mailbox_id=%s AND ou_id=%s", (mailbox_id, ou_id))
        if len(rows) == 0:
            print "[ERROR] No such SystemIdx for mailbox_id=%s" % mailbox_id
        system_id = rows[0][0]
        parent_id = rows[0][1]

        contexts = backend.list_contexts(username)
        for context in contexts:
            folder_id = context["url"]
            folder_id = folder_id.replace("sample://", '')
            folder_id = int(folder_id.replace('/', ''), 16)
            c.insert("INSERT INTO folders (ou_id,folder_id,folder_class,mailbox_id,"
                     "parent_folder_id,FolderType,SystemIdx,MAPIStoreURI) VALUES "
                     "(%s, %s, \"system\", %s, %s, 1, -1, %s)",
                     (ou_id, folder_id, mailbox_id, system_id, context["url"]))

            rows = c.select("SELECT MAX(id) FROM folders")
            fid = rows[0][0]
            (ret,ctx) = backend.create_context(context["url"], username)
            (ret,fld) = ctx.get_root_folder(folder_id)

            props = fld.get_properties(None)

            for prop in props:
                c.insert("INSERT INTO folders_properties (folder_id, name, value) VALUES (%s, %s, %s)", (fid, prop, props[prop]))
            c.insert("INSERT INTO folders_properties (folder_id, name, value) VALUES (%s, \"PidTagParentFolderId\", %s)", (fid, parent_id))
        print "[DONE]"

    if opts.deprovision:
        if not rows:
            print "[WARN] Sample backend is not provisioned for user %s" % username
            sys.exit(0)

        for row in rows:
            c.delete("DELETE FROM folders WHERE id=%s", row[0])
            c.delete("DELETE FROM folders_properties WHERE folder_id=%s", row[0])
        c.delete("DELETE FROM mapistore_indexing WHERE url LIKE %s", nslike)
        print "[DONE]"
